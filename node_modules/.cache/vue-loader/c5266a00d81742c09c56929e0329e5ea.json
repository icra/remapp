{"remainingRequest":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/roser/Documents/ICRA/REMapp/remapp/node_modules/pug-plain-loader/index.js!/home/roser/Documents/ICRA/REMapp/remapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/roser/Documents/ICRA/REMapp/remapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/roser/Documents/ICRA/REMapp/remapp/src/components/Header.vue?vue&type=template&id=61dd7a3d&scoped=true&lang=pug&","dependencies":[{"path":"/home/roser/Documents/ICRA/REMapp/remapp/src/components/Header.vue","mtime":1596181320898},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/cache-loader/dist/cjs.js","mtime":1596115513665},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1596115514201},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/pug-plain-loader/index.js","mtime":1595510251026},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/cache-loader/dist/cjs.js","mtime":1596115513665},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/vue-loader/lib/index.js","mtime":1596115514201}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyQ29udGVudCIgfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgImItY29udGFpbmVyIiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAicC0yIG14LWxnLTUiLCBhdHRyczogeyBmbHVpZDogInRydWUiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItcm93IiwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiOHZoIiB9LAogICAgICAgICAgICAgICAgICBhdHRyczogeyAiYWxpZ24taCI6ICJzdGFydCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImItaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicC0yIiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgIm1heC13aWR0aCI6ICIxMDAlIiwKICAgICAgICAgICAgICAgICAgICAgICJtYXgtaGVpZ2h0IjogIjEwMCUiLAogICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogImJsb2NrIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2ltZy9sb2dvX21lbS5wbmciIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgImFsaWduLXNlbGYiOiAiY2VudGVyIiwKICAgICAgICAgICAgICAgICAgICAiYWxpZ24taCI6ICJlbmQiLAogICAgICAgICAgICAgICAgICAgIGNvbHM6ICJhdXRvIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYi1yb3ciLAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgY29sczogImF1dG8iIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBQk9VVCBSRU1hcHAiKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYi10b2dnbGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWItdG9nZ2xlLmFib3V0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgYWJvdXQ6IHRydWUgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImNoZXZyb24tdXAiLCBzaXplOiAic20iIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLXJvdyIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgImFsaWduLWgiOiAiZW5kIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJiLWNvbGxhcHNlIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxhcHNlZCBtdC0yIHAtMiIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImFib3V0IiB9LAogICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5pbmZvLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmluZm8gPSAkJHYKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImluZm8iCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJXaGF0IGlzIFJFTWFwcCBmb3I/IildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIlJFTWFwcCBpcyBhIHNpbXBsZSBkZWNpc2lvbi1tYWtpbmcgdG9vbCBmb3IgZW5kLW9mLWxpZmUgc3BpcmFsLXdvdW5kIHJldmVyc2Ugb3Ntb3NpcyBhbmQgbmFub2ZpbHRyYXRpb24gbWVtYnJhbmVzIHdpdGggdGhlIHNwZWNpZmljIHNpemUgb2YgNDAgaW5jaGVzIG9mIGxlbmd0aCBhbmQgOCBpbmNoZXMgb2YgZGlhbWV0ZXIuIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIldobyBpcyBSRU1hcHAgdXNlZnVsIGZvcj8iKV0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiTWVtYnJhbmUgdXNlcnMgd2hvIGFyZSBnb2luZyB0byByZXBsYWNlIG1lbWJyYW5lcyBhbmQgYXJlIHNlZWtpbmcgYWx0ZXJuYXRpdmUgZW5kLW9mLWxpZmUgbWVtYnJhbmUgbWFuYWdlbWVudHMuIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICJXaGljaCBhcmUgdGhlIHBvdGVudGlhbCBraW5kIG9mIGVuZC1vZi1saWZlIG1lbWJyYW5lIG1hbmFnZW1lbnRzPyIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICJUaGUgcHJlZmVyYWJsZSBvcmRlciBpczogcmV1c2UsIHJlZ2VuZXJhdGlvbiBmb3IgcmV1c2UsIGRpcmVjdCByZWN5Y2xpbmcsIGluZGlyZWN0IHJlY3ljbGluZywgaW5jaW5lcmF0aW9uIGFuZCBsYW5kZmlsbCBkaXNwb3NhbC4gV29ybGR3aWRlIHRoZSBtb3N0IGNvbW1vbiBtYW5hZ2VtZW50IGlzIGluY2luZXJhdGlvbiBhbmQgbGFuZGZpbGwgZGlzcG9zYWwgKGJ5IGZhcikuIFJFTWFwcCBzaG93cyBjdXJyZW50IGludmVzdGlnYXRpb25zIGFuZCBjb21wYW5pZXMgdGhhdCB0cnkgdG8gYm9vc3QgYWx0ZXJuYXRpdmUgZW5kLW9mLWxpZmUgbWVtYnJhbmUgbWFuYWdlbWVudHMgdG8gdGhvc2UgdHdvIGxhc3QuIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoImItanVtYm90cm9uIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAicHgtbGctNSIsCiAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAidmFyKC0tZGFyay1ncmF5LXByaW1hcnkpIiB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBoZWFkZXI6ICJSRU1hcHAgZGVjaXNpb24tbWFraW5nIHRvb2wiLAogICAgICAgICAgbGVhZDoKICAgICAgICAgICAgIkZpbmQgeW91ciBhbHRlcm5hdGl2ZSBzb2x1dGlvbiBmb3IgYSBzdXN0YWluYWJsZSBlbmQtb2YtbGlmZSByZXZlcnNlIG9zbW9zaXMgbWVtYnJhbmUgbWFuYWdlbWVudCIKICAgICAgICB9CiAgICAgIH0pCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}
{"remainingRequest":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/roser/Documents/ICRA/REMapp/remapp/src/components/Menus.vue?vue&type=template&id=d65e2e18&lang=pug&","dependencies":[{"path":"/home/roser/Documents/ICRA/REMapp/remapp/src/components/Menus.vue","mtime":1596815772631},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/cache-loader/dist/cjs.js","mtime":1596115513665},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1596115514201},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/pug-plain-loader/index.js","mtime":1595510251026},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/cache-loader/dist/cjs.js","mtime":1596115513665},{"path":"/home/roser/Documents/ICRA/REMapp/remapp/node_modules/vue-loader/lib/index.js","mtime":1596115514201}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgZGl2LnJlbWFwVG9vbGJveAogICAgZGl2LmhlYWRlcgogICAgICBIZWFkZXIKICAgIGRpdi5jb250ZW50CiAgICAgIGItY29udGFpbmVyLnAtMi5teC1sZy01KGZsdWlkPSJ0cnVlIikKICAgICAgICBiLXJvdwogICAgICAgICAgYi1jb2woc209IjEyIiBtZD0iNCIgeGw9IjMiKQogICAgICAgICAgICBiLW5hdmJhci5wdC0wCiAgICAgICAgICAgICAgLnNpZGViYXItaGVhZGVyCiAgICAgICAgICAgICAgICBiLXJvdy5tYi0wLnBiLTAKICAgICAgICAgICAgICAgICAgYi1jb2wKICAgICAgICAgICAgICAgICAgICBoNChzdHlsZT0iZm9udC13ZWlnaHQ6IHZhcigtLWJvbGQtdGV4dCk7IHRleHQtYWxpZ246bGVmdCIpIFN1cnZleQogICAgICAgICAgICAgICAgICBiLWNvbChjb2xzPSJhdXRvIiBhbGlnbi1oPSJlbmQiKQogICAgICAgICAgICAgICAgICAgIGItYnV0dG9uLmNsZWFyQnV0dChAY2xpY2s9ImNsZWFyVmFsdWVzIikgQ0xFQVIgQUxMCiAgICAgICAgICAgICAgICBiLWRyb3Bkb3duLWRpdmlkZXIoc3R5bGU9ImhlaWdodDogMDsgbWFyZ2luOiAwIDAgMC43NXJlbSAwOyBvdmVyZmxvdzogaGlkZGVuOyBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tbGlnaHQtZ3JheS1wcmltYXJ5KTsiKQogICAgICAgICAgICAgICAgZGl2KHN0eWxlPSJvdmVyZmxvdy15OiBzY3JvbGw7IG1heC1oZWlnaHQ6IDcwdmg7IikucHItMgogICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSh2LWZvcj0icSBpbiBxdWVzdGlvbnMiIDppZD0icS5jb2RlIiBzdHlsZT0ib3ZlcmZsb3cteTogYXV0byIpCiAgICAgICAgICAgICAgICAgICAgYiB7e3EubmFtZX19CiAgICAgICAgICAgICAgICAgICAgbXVsdGlzZWxlY3QoCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJxLnZhbHVlIiwKICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJxLmFuc3dlcnMiLAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlBpY2sgYSB2YWx1ZSIsCiAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImlzX2Rpc2FibGVkKHEpIgogICAgICAgICAgICAgICAgICAgICkubXVsdGlzZWxlY3QKICAgICAgICAgIGItY29sCiAgICAgICAgICAgIC8vcm91dGVyLXZpZXcKICAgICAgICAgICAgPCEtLXN1cnZleSAxIG91dHB1dHMtLT4KICAgICAgICAgICAgZGl2CiAgICAgICAgICAgICAgYi10YWJzKGNvbnRlbnQtY2xhc3M9IiIgZmlsbCkKICAgICAgICAgICAgICAgIGItdGFiI3NvbHV0aW9ucyh0aXRsZT0iU09MVVRJT05TIiBhY3RpdmUpLnAtMy50YWJCb3gKICAgICAgICAgICAgICAgICAgYiBBbHRlcm5hdGl2ZSBlbmQtb2YtbGlmZSBtZW1icmFuZSBtYW5hZ2VtZW50CiAgICAgICAgICAgICAgICAgIC8vZGl2Lm1lbWJyYW5lX3JldXNlKDpzdHlsZT0iYGJhY2tncm91bmQ6JHtnZXRfbWVtYnJhbmVfcmV1c2VfY29sb3IoKX1gIikgIHt7c2hvd19tZW1icmFuZV9yZXVzZSgpfX0KICAgICAgICAgICAgICAgICAgZGl2Lm1lbWJyYW5lX3JldXNlKHYtZm9yPSJzICBpbiBnZXRfYXZhaWxhYmxlX3NvbHV0aW9ucyIpCiAgICAgICAgICAgICAgICAgICAgLy9kaXYubWVtYnJhbmVfcmV1c2UoOmlkPSJzLmNvZGUiIDprZXk9InMuY29kZSIgOnN0eWxlPSJgYmFja2dyb3VuZDoke3MuY29sb3J9YCIpICB7eyBzLm5hbWUgfX0KICAgICAgICAgICAgICAgICAgICBiLXJvdy5tbC0wCiAgICAgICAgICAgICAgICAgICAgICBiLWNvbCg6c3R5bGU9ImBiYWNrZ3JvdW5kOiR7cy5jb2xvcn1gIiBzbT0iMiIgeGw9IjEiICkKICAgICAgICAgICAgICAgICAgICAgIGItY29sKHNtPSIxMCIgIHhsPSIxMSIgKSB7eyBzLm5hbWUgfX0KICAgICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgICAgYiBDb25zaWRlcmF0aW9ucyB0byByZXByb2R1Y2UgdGhlIHJlY29tbWVuZGVkIHNlY29uZC1oYW5kIG1lbWJyYW5lcwogICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSh2LWlmPSJyZXN1bHRfc3VydmV5XzIubGVuZ3RoICE9PSAwIikKICAgICAgICAgICAgICAgICAgICBkaXYubWVtYnJhbmVfcmV1c2Uodi1mb3I9InMgaW4gcmVzdWx0X3N1cnZleV8yIikKICAgICAgICAgICAgICAgICAgICAgIGItdGFibGUoc3RhY2tlZCBzbWFsbCBvdXRsaW5lZCA6ZmllbGRzPSJ0YWJsZV9maWVsZHMiIDppdGVtcz0iW2FkYXB0X3N1cnZleV8yX3Jlc3VsdChzKV0iKQogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSh2LXNsb3Q6aGVhZCgpPSJ7IHZhbHVlIH0iKQogICAgICAgICAgICAgICAgICAgICAgICAgIHAoOnN0eWxlPSIiKSB7eyBkYXRhLmxhYmVsIH19CgogICAgICAgICAgICAgICAgICAgICAgICAgIC8vYi1saW5rLnVybCg6aHJlZj0idmFsdWUiIHRhcmdldD0iX2JsYW5rIikge3sgdmFsdWUgfX0KICAgICAgICAgICAgICAgICAgICAgIC8vPHRlbXBsYXRlIHYtc2xvdDpmb290KCk9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgLy88aT57eyBkYXRhLmxhYmVsIH19PC9pPgogICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSh2LWVsc2UpCiAgICAgICAgICAgICAgICAgICAgYi5hc3Rlcmlza19tYXJrI3Rvb2x0aXAgICoKICAgICAgICAgICAgICAgICAgICBiLXRvb2x0aXAodGFyZ2V0PSJ0b29sdGlwIiApIFBsZWFzZSBhbnN3ZXIgJ1NhbHQgUmVqZWN0aW9uJyBhbmQgJ1ZhcmlhdGlvbiBvZiBQZXJtZWFiaWxpdHknIHRvIHNlZSB0aGUgY29uc2lkZXJhdGlvbnMgdG8gcmVwcm9kdWNlIHRoZSByZWNvbW1lbmRlZCBzZWNvbmQtaGFuZCBtZW1icmFuZXMKICAgICAgICAgICAgICAgIGItdGFiI2Nhc2VTdHVkaWVzKHRpdGxlPSJDQVNFIFNUVURJRVMiKS5wLTMudGFiQm94CiAgICAgICAgICAgICAgICAgIENhc2VTdHVkaWVzKAogICAgICAgICAgICAgICAgICAgIHYtYmluZDpzb2x1dGlvbi1jb2RlPSJ0aGlzLmdldF9zb2x1dGlvbnNfZm9yX2Nhc2Vfc3R1ZGllcyIKICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6dHlwZS1tZW1icmFuZT0idGhpcy5nZXRfcXVlc3Rpb25fYnlfY29kZSgnVCcpLnZhbHVlIgogICAgICAgICAgICAgICAgICAgIDpzYWx0LXJlamVjdGlvbj0idGhpcy5nZXRfcXVlc3Rpb25fYnlfY29kZSgnUicpLnZhbHVlIgogICAgICAgICAgICAgICAgICAgIDpwZXJtZWFiaWxpdHk9InRoaXMuZ2V0X3F1ZXN0aW9uX2J5X2NvZGUoJ1BWJykudmFsdWUiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLy9iLXRhYiNmYWN0U2hlZXRzKHRpdGxlPSJGQUNUIFNIRUVUUyIpLnAtMy50YWJCb3gKICAgICAgICAgICAgICAgICAgRmFjdFNoZWV0cwogICAgZm9vdGVyLmZvb3RlcgogICAgICBGb290ZXIKCjwvdGVtcGxhdGU+Cgo8c2NyaXB0PgogIGltcG9ydCBNdWx0aXNlbGVjdCBmcm9tICd2dWUtbXVsdGlzZWxlY3QnCiAgaW1wb3J0IENhc2VTdHVkaWVzIGZyb20gIi4vQ2FzZVN0dWRpZXMiOwogIGltcG9ydCBGYWN0U2hlZXRzIGZyb20gIi4vRmFjdFNoZWV0cyI7CiAgaW1wb3J0IEZvb3RlciBmcm9tICIuL0Zvb3RlciI7CiAgaW1wb3J0IEhlYWRlciBmcm9tICIuL0hlYWRlciI7CiAgaW1wb3J0IF8gZnJvbSAibG9kYXNoIjsKCiAgZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogIk1lbnVzIiwKICAgIGNvbXBvbmVudHM6IHsKICAgICAgSGVhZGVyLAogICAgICBGb290ZXIsCiAgICAgIEZhY3RTaGVldHMsCiAgICAgIENhc2VTdHVkaWVzLAogICAgICBNdWx0aXNlbGVjdAogICAgfSwKICAgIGRhdGEoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdGFibGVfZmllbGRzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleTogIm1lbWJyYW5lX3JldXNlIiwKICAgICAgICAgICAgaXNSb3dIZWFkZXI6IHRydWUsCiAgICAgICAgICAgIGxhYmVsOiAiTWVtYnJhbmUgcmV1c2UiLAogICAgICAgICAgICBjbGFzczogInRIZWFkZXIiLAogICAgICAgICAgICB0aFN0eWxlOiB7YmFja2dyb3VuZDogJyMzZWVmMzMnfSwKICAgICAgICAgICAgLy92YXJpYW50OiAiZGFuZ2VyIgogICAgICAgICAgfSwKICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIiwKICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiLAogICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIiwKICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiLAogICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSIsCiAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIiwKICAgICAgICAgICJQb3RlbnRpYWwgYXBwbGljYXRpb24gb2YgdGhlIHNlY29uZCBoYW5kIG1lbWJyYW5lcyIKICAgICAgICBdLAogICAgICAgIHF1ZXN0aW9uczogWwogICAgICAgICAgLy8gU3VydmV5IDEKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogIlQiLAogICAgICAgICAgICBuYW1lOiAiVHlwZSBvZiBtZW1icmFuZSIsCiAgICAgICAgICAgIHZhbHVlOiBudWxsLAogICAgICAgICAgICBhbnN3ZXJzOiBbIlJldmVyc2Ugb3Ntb3NpcyBicmFja2lzaCBtb2RlbCBkZXNpZ24iLCAiUmV2ZXJzZSBvc21vc2lzIHNlYSBtb2RlbCBkZXNpZ24iLCAiTmFub2ZpbHRyYXRpb24iLCAiVWx0cmFmaWx0cmF0aW9uIiwgIk1pY3JvZmlsdHJhdGlvbiIsICJPdGhlciJdCiAgICAgICAgICB9LAogICAgICAgICAge2NvZGU6ICJDIiwgbmFtZTogIk1lbWJyYW5lIGNvbmZpZ3VyYXRpb24iLCB2YWx1ZTogbnVsbCwgYW5zd2VyczogWyJTcGlyYWwtd291bmQiLCAiT3RoZXIiXX0sCiAgICAgICAgICB7Y29kZTogIlMiLCBuYW1lOiAiTWVtYnJhbmUgc2l6ZSIsIHZhbHVlOiBudWxsLCBhbnN3ZXJzOiBbIkxlbmd0aDogMW0uIERpYW1ldGVyOiAwLjJtIiwgIk90aGVyIl19LAogICAgICAgICAge2NvZGU6ICJXIiwgbmFtZTogIk1lbWJyYW5lIHdlaWdodCIsIHZhbHVlOiBudWxsLCBhbnN3ZXJzOiBbIjwxN2tnIiwgIjE3LTI1IGtnIiwgIj4yNWtnIiwgIkRvbid0IGtub3ciXX0sCiAgICAgICAgICB7Y29kZTogIkVEIiwgbmFtZTogIkV4dGVybmFsIGRhbWFnZSIsIHZhbHVlOiBudWxsLCBhbnN3ZXJzOiBbIk5vIiwgIlllcyIsICJEb24ndCBrbm93Il19LAogICAgICAgICAge2NvZGU6ICJGIiwgbmFtZTogIkZvdWxpbmcgdHlwZSIsIHZhbHVlOiBudWxsLCBhbnN3ZXJzOiBbIklub3JnYW5pYyBzY2FsaW5nIiwgIk90aGVyIiwgIkRvbid0IGtub3ciXX0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6ICJTVCIsCiAgICAgICAgICAgIG5hbWU6ICJNZW1icmFuZSBzdG9yYWdlIiwKICAgICAgICAgICAgdmFsdWU6IG51bGwsCiAgICAgICAgICAgIGFuc3dlcnM6IFsiV2V0IiwgIkltbWVyc2VkIGluIGEgd2F0ZXIgc29sdXRpb24iLCAiRHJ5IiwgIkRvbid0IGtub3ciXQogICAgICAgICAgfSwKICAgICAgICAgIHtjb2RlOiAiRCIsIG5hbWU6ICJTdG9yYWdlIGR1cmF0aW9uIiwgdmFsdWU6IG51bGwsIGFuc3dlcnM6IFsiPDEgbW9udGgiLCAiPjEgbW9udGgiLCAiRG9uJ3Qga25vdyJdfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogIlJQIiwKICAgICAgICAgICAgbmFtZTogIkNhdXNlIG9mIHJlcGxhY2VtZW50IiwKICAgICAgICAgICAgdmFsdWU6IG51bGwsCiAgICAgICAgICAgIGFuc3dlcnM6IFsiR3JhbnRlZCBidWRnZXQgZm9yIHJlcGxhY2VtZW50IiwgIk9wZXJhdGluZyBtb3JlIHRoYW4gdGhlIGV4cGVjdGVkIGxpZmVzcGFuIiwgIkxvc3Qgb2YgbWVtYnJhbmUgaW50ZWdyaXR5IiwgIkRvbid0IGtub3ciXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogIlAiLAogICAgICAgICAgICBuYW1lOiAiTWVtYnJhbmUgcG9zaXRpb24iLAogICAgICAgICAgICB2YWx1ZTogbnVsbCwKICAgICAgICAgICAgYW5zd2VyczogWyJTaW5nbGUgcGFzcyIsICJEb3VibGUgcGFzcyAtIHNpbmdsZSBzdGFnZSIsICJEb3VibGUgcGFzcyAtIGRvdWJsZSBzdGFnZSIsICJNaXgiLCAiRG9uJ3Qga25vdyJdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiAiV1QiLAogICAgICAgICAgICBuYW1lOiAiVHlwZSBvZiB3YXRlciIsCiAgICAgICAgICAgIHZhbHVlOiBudWxsLAogICAgICAgICAgICBhbnN3ZXJzOiBbIlNlYXdhdGVyIiwgIkJyYWNraXNoIHdhdGVyIiwgIldhc3Rld2F0ZXIiLCAiQ2hlbWljYWwgaW5kdXN0cnkiLCAiRm9vZCBpbmR1c3RyeSJdCiAgICAgICAgICB9LAogICAgICAgICAgLy8gU3VydmV5IDIKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogIlIiLAogICAgICAgICAgICBuYW1lOiAiU2FsdCByZWplY3Rpb24iLAogICAgICAgICAgICB2YWx1ZTogbnVsbCwKICAgICAgICAgICAgYW5zd2VyczogWyI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwgIj4xMCUgb2YgTmFDbCBhbmQgPjMwJSBvZiBNZ1NPNCIsICI8MTAlIG9mIE5hQ2wgYW5kIDwzMCUgb2YgTWdTTzQiXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogIlBWIiwKICAgICAgICAgICAgbmFtZTogIlZhcmlhdGlvbiBvZiBQZXJtZWFiaWxpdHkiLAogICAgICAgICAgICB2YWx1ZTogbnVsbCwKICAgICAgICAgICAgYW5zd2VyczogWyI8MS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwgIlsxLTVdLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLCAiPjUtZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSJdCiAgICAgICAgICB9LAogICAgICAgIF0sCiAgICAgICAgbWVtYnJhbmVfcmV1c2Vfb3B0aW9uczogWwogICAgICAgICAgLy8gU3VydmV5IDEKICAgICAgICAgIHtjb2RlOiAiTEkiLCBuYW1lOiAiTGFuZGZpbGwgZGlzcG9zYWwgb3IgaW5jaW5lcmF0aW9uIiwgY29sb3I6ICIjYmU1MTRlIn0sCiAgICAgICAgICB7Y29kZTogIklSIiwgbmFtZTogIkluZGlyZWN0IHJlY3ljbGluZyIsIGNvbG9yOiAiIzYwNGI3OSJ9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiAiQU0iLAogICAgICAgICAgICBuYW1lOiAiTWVtYnJhbmVzIGFyZSBzdWl0YWJsZSBmb3IgYW4gYWx0ZXJuYXRpdmUgbWFuYWdlbWVudCB0byBsYW5kZmlsbCBkaXNwb3NhbCBvciBpbmNpbmVyYXRpb24uIiwKICAgICAgICAgICAgY29sb3I6ICIjOWFiOTU5IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogIkFNUiIsCiAgICAgICAgICAgIG5hbWU6ICJNZW1icmFuZXMgYXJlIHN1aXRhYmxlIGZvciBhbiBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50IHRvIGxhbmRmaWxsIGRpc3Bvc2FsIG9yIGluY2luZXJhdGlvbi4gIiArCiAgICAgICAgICAgICAgIk1lbWJyYW5lcyBtaWdodCBuZWVkIHRvIGJlIHJlaHlkcmF0ZWQgdXNpbmcgNTAlIHcvdyBldGhhbm9sIGR1cmluZyAxNSBtaW4uIiwKICAgICAgICAgICAgY29sb3I6ICIjYzJkNTlhIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogIklDIiwKICAgICAgICAgICAgbmFtZTogIkludGVuc2l2ZSBjbGVhbmluZyBiZWZvcmUgY29uc2lkZXJpbmcgYW4gYWx0ZXJuYXRpdmUgbWFuYWdlbWVudCB0byBsYW5kZmlsbCBkaXNwb3NhbCBvciBpbmNpbmVyYXRpb24iLAogICAgICAgICAgICBjb2xvcjogIiMwY2FlNTEiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiAiTkVJTSIsCiAgICAgICAgICAgIG5hbWU6ICJOb3QgZW5vdWdoIGluZm9ybWF0aW9uLiBQb3RlbnRpYWxseSwgbWVtYnJhbmVzIGFyZSBzdWl0YWJsZSBmb3IgYWx0ZXJuYXRpdmUgbWFuYWdlbWVudC4iLAogICAgICAgICAgICBjb2xvcjogIiM0ZGFiYzUiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiAiTkVJQyIsCiAgICAgICAgICAgIG5hbWU6ICJOb3QgZW5vdWdoIGluZm9ybWF0aW9uLiBQb3RlbnRpYWxseSwgYXBwbHkgaW50ZW5zaXZlIGNsZWFuaW5nIGJlZm9yZSBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50LiIsCiAgICAgICAgICAgIGNvbG9yOiAiIzM1ODQ5YiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6ICJORUlSIiwKICAgICAgICAgICAgbmFtZTogIk5vdCBlbm91Z2ggaW5mb3JtYXRpb24uIFBvdGVudGlhbGx5LCBpbmRpcmVjdCByZWN5Y2xpbmcuIiwKICAgICAgICAgICAgY29sb3I6ICIjZmZmZjAwIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogIklSQyIsCiAgICAgICAgICAgIG5hbWU6ICJJbmRpcmVjdCByZWN5Y2xpbmcgb2YgdGhvc2UgbWVtYnJhbmVzIHBsYWNlZCBpbiB0aGUgc2Vjb25kIHN0YWdlLiBQb3RlbnRpYWxseSwgYXBwbHkgaW50ZW5zaXZlICIgKwogICAgICAgICAgICAgICJjbGVhbmluZyBiZWZvcmUgY29uc2lkZXJpbmcgYW4gYWx0ZXJuYXRpdmUgbWFuYWdlbWVudCBmb3IgdGhvc2UgbWVtYnJhbmVzIHBsYWNlZCBpbiB0aGUgZmlyc3Qgc3RhZ2UuIiwKICAgICAgICAgICAgY29sb3I6ICIjZjc5NDQ3IgogICAgICAgICAgfSwKICAgICAgICAgIC8vIFN1cnZleSAyCiAgICAgICAgICB7Y29kZTogIlJldVJPIiwgbmFtZTogIlJldXNlIGFzIHJldmVyc2Ugb3Ntb3NpcyBtZW1icmFuZXMiLCAgICAgICAgICAgICAgIGNvbG9yOiAiIzAwZmYwMCJ9LAogICAgICAgICAge2NvZGU6ICJSZXVORiIsIG5hbWU6ICJSZXVzZSBhcyBuYW5vZmlsdHJhdGlvbi1saWtlIG1lbWJyYW5lcyIsICAgICAgICAgICBjb2xvcjogIiM2NmZmNjYifSwKICAgICAgICAgIHtjb2RlOiAiUmVnUk8iLCBuYW1lOiAiUmVnZW5lcmF0ZSB0byByZXVzZSBhcyByZXZlcnNlIG9zbW9zaXMgbWVtYnJhbmVzIiwgY29sb3I6ICIjOTlmZjMzIn0sCiAgICAgICAgICB7Y29kZTogIlJlZ05GIiwgbmFtZTogIlJlZ2VuZXJhdGUgdG8gcmV1c2UgYXMgbmFub2ZpbHRyYXRpb24gbWVtYnJhbmVzIiwgIGNvbG9yOiAiI2NjZmYzMyJ9LAogICAgICAgICAge2NvZGU6ICJSZWNORiIsIG5hbWU6ICJSZWN5Y2xpbmcgaW50byBuYW5vZmlsdHJhdGlvbi1saWtlIG1lbWJyYW5lcyIsICAgICBjb2xvcjogIiMzM2NjMzMifSwKICAgICAgICAgIHtjb2RlOiAiUmVjVUYiLCBuYW1lOiAiUmVjeWNsaW5nIGludG8gdWx0cmFmaWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwgICAgY29sb3I6ICIjNzc5MzNjIn0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIlJldmVyc2Ugb3Ntb3NpcyBicmFja2lzaCBtb2RlbCBkZXNpZ24iLAogICAgICAgICAgICAgICJwZXJtZWFiaWxpdHkiOiAiPDEtZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIsCiAgICAgICAgICAgICAgInNhbHRSZWplY3Rpb24iOiAiPDE1JSBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIsCiAgICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiUmVnZW5lcmF0ZSB0byByZXVzZSBhcyByZXZlcnNlIG9zbW9zaXMgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIjwgMiw1MDAgcHBtIGggIiwKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIHF1YWxpdGF0aXZlIjogImxvdyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKysiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiWzI2LTU1XSIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoICsrIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogIm1lZGl1bSIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBhcHBsaWNhdGlvbiBvZiB0aGUgc2Vjb25kIGhhbmQgbWVtYnJhbmVzIjogIldhc3Rld2F0ZXIgdHJlYXRtZW50OyBCcmFja2lzaCB3YXRlciBkZXNhbGluYXRpb24gZm9yIGlycmlnYXRpb24gb3Igb3RoZXIgdXNlcyBleGNlcHRpbmcgZHJpbmtpbmcgd2F0ZXI7IFNlYXdhdGVyIHByb2Nlc3MgdG8gdHJlYXQgdGhlIGNvbmNlbnRyYXRlOyBJbmR1c3RyaWFsIHdhc3Rld2F0ZXI7IEZyZXNoIHdhdGVyIGZvciBpc29sYXRlZCBhcmVhcyIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJSZXZlcnNlIG9zbW9zaXMgYnJhY2tpc2ggbW9kZWwgZGVzaWduIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIjwxLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIj4xMCUgb2YgTmFDbCBhbmQgPjMwJSBvZiBNZ1NPNCIsCiAgICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiUmVjeWNsaW5nIGludG8gbmFub2ZpbHRyYXRpb24tbGlrZSBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiWzIsNTAwLTI1LDAwMF0gcHBtIGgiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAibWVkaXVtICIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIGNvc3QgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbnRpdGF0aXZlIOKCrCI6ICJbMjYtNTVdIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2ggKyIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQ7IEJyYWNraXNoIHdhdGVyIGRlc2FsaW5hdGlvbiBmb3IgaXJyaWdhdGlvbiBvciBvdGhlciB1c2VzIGV4Y2VwdGluZyBkcmlua2luZyB3YXRlcjsgU2Vhd2F0ZXIgcHJvY2VzcyB0byB0cmVhdCB0aGUgY29uY2VudHJhdGU7IEluZHVzdHJpYWwgd2FzdGV3YXRlcjsgRnJlc2ggd2F0ZXIgZm9yIGlzb2xhdGVkIGFyZWFzIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIlJldmVyc2Ugb3Ntb3NpcyBicmFja2lzaCBtb2RlbCBkZXNpZ24iLAogICAgICAgICAgICAgICJwZXJtZWFiaWxpdHkiOiAiPDEtZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIsCiAgICAgICAgICAgICAgInNhbHRSZWplY3Rpb24iOiAiPDEwJSBvZiBOYUNsIGFuZCA8MzAlIG9mIE1nU080IiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZWN5Y2xpbmcgaW50byB1bHRyYWZpbHRyYXRpb24tbGlrZSBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiWzE1LDAwMC0xMDAsMDAwXSBwcG0gaCIsCiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSBxdWFsaXRhdGl2ZSI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiWzMyLTYzXSIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoICIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJsb3cgIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQsIHByZS10cmVhdG1lbnQgZm9yIGRlc2FsaW5hdGlvbiBwcm9jZXNzZXMsIGdyYXZpdHktZHJpdmVuIHdhdGVyIHRyZWF0bWVudCAoZ3JleSwgdXJiYW4gd2F0ZXIgYW5kIGRyaW5raW5nIHdhdGVyKSIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJSZXZlcnNlIG9zbW9zaXMgYnJhY2tpc2ggbW9kZWwgZGVzaWduIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIlsxLTVdLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxNSUgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJldXNlIGFzIHJldmVyc2Ugb3Ntb3NpcyBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiMCIsCiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSBxdWFsaXRhdGl2ZSI6ICIwIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoICsrKyIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJOb3QgcmVxdWlyZWQiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgYXBwbGljYXRpb24gb2YgdGhlIHNlY29uZCBoYW5kIG1lbWJyYW5lcyI6ICJXYXN0ZXdhdGVyIHRyZWF0bWVudDsgQnJhY2tpc2ggd2F0ZXIgZGVzYWxpbmF0aW9uIGZvciBpcnJpZ2F0aW9uIG9yIG90aGVyIHVzZXMgZXhjZXB0aW5nIGRyaW5raW5nIHdhdGVyOyBTZWF3YXRlciBwcm9jZXNzIHRvIHRyZWF0IHRoZSBjb25jZW50cmF0ZTsgSW5kdXN0cmlhbCB3YXN0ZXdhdGVyOyBGcmVzaCB3YXRlciBmb3IgaXNvbGF0ZWQgYXJlYXMiICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogewogICAgICAgICAgICAgICJ0eXBlTWVtYnJhbmUiOiAiUmV2ZXJzZSBvc21vc2lzIGJyYWNraXNoIG1vZGVsIGRlc2lnbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICJbMS01XS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJldXNlIGFzIG5hbm9maWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIjAiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAiTm90IHJlcXVpcmVkIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQ7IEJyYWNraXNoIHdhdGVyIGRlc2FsaW5hdGlvbiBmb3IgaXJyaWdhdGlvbiBvciBvdGhlciB1c2VzIGV4Y2VwdGluZyBkcmlua2luZyB3YXRlcjsgU2Vhd2F0ZXIgcHJvY2VzcyB0byB0cmVhdCB0aGUgY29uY2VudHJhdGU7IEluZHVzdHJpYWwgd2FzdGV3YXRlcjsgRnJlc2ggd2F0ZXIgZm9yIGlzb2xhdGVkIGFyZWFzIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIlJldmVyc2Ugb3Ntb3NpcyBicmFja2lzaCBtb2RlbCBkZXNpZ24iLAogICAgICAgICAgICAgICJwZXJtZWFiaWxpdHkiOiAiWzEtNV0tZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIsCiAgICAgICAgICAgICAgInNhbHRSZWplY3Rpb24iOiAiPDEwJSBvZiBOYUNsIGFuZCA8MzAlIG9mIE1nU080IiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZWN5Y2xpbmcgaW50byB1bHRyYWZpbHRyYXRpb24tbGlrZSBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiWzEwLDAwMC02MCwwMDBdIHBwbSBoIiwKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIHF1YWxpdGF0aXZlIjogImhpZ2giLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZW52aXJvbm1lbnRhbCByZWR1Y3Rpb24gZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcyI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIlszMi02M10iLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJsb3cgIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQsIHByZS10cmVhdG1lbnQgZm9yIGRlc2FsaW5hdGlvbiBwcm9jZXNzZXMsIGdyYXZpdHktZHJpdmVuIHdhdGVyIHRyZWF0bWVudCAoZ3JleSwgdXJiYW4gd2F0ZXIgYW5kIGRyaW5raW5nIHdhdGVyKSIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJSZXZlcnNlIG9zbW9zaXMgYnJhY2tpc2ggbW9kZWwgZGVzaWduIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIj41LWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxNSUgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJldXNlIGFzIHJldmVyc2Ugb3Ntb3NpcyBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiMCIsCiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSBxdWFsaXRhdGl2ZSI6ICIwIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoICsrKyIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJOb3QgcmVxdWlyZWQiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgYXBwbGljYXRpb24gb2YgdGhlIHNlY29uZCBoYW5kIG1lbWJyYW5lcyI6ICJXYXN0ZXdhdGVyIHRyZWF0bWVudDsgQnJhY2tpc2ggd2F0ZXIgZGVzYWxpbmF0aW9uIGZvciBpcnJpZ2F0aW9uIG9yIG90aGVyIHVzZXMgZXhjZXB0aW5nIGRyaW5raW5nIHdhdGVyOyBTZWF3YXRlciBwcm9jZXNzIHRvIHRyZWF0IHRoZSBjb25jZW50cmF0ZTsgSW5kdXN0cmlhbCB3YXN0ZXdhdGVyOyBGcmVzaCB3YXRlciBmb3IgaXNvbGF0ZWQgYXJlYXMiICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogewogICAgICAgICAgICAgICJ0eXBlTWVtYnJhbmUiOiAiUmV2ZXJzZSBvc21vc2lzIGJyYWNraXNoIG1vZGVsIGRlc2lnbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICI+NS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJldXNlIGFzIG5hbm9maWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIjAiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAiTm90IHJlcXVpcmVkIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQ7IEJyYWNraXNoIHdhdGVyIGRlc2FsaW5hdGlvbiBmb3IgaXJyaWdhdGlvbiBvciBvdGhlciB1c2VzIGV4Y2VwdGluZyBkcmlua2luZyB3YXRlcjsgU2Vhd2F0ZXIgcHJvY2VzcyB0byB0cmVhdCB0aGUgY29uY2VudHJhdGU7IEluZHVzdHJpYWwgd2FzdGV3YXRlcjsgRnJlc2ggd2F0ZXIgZm9yIGlzb2xhdGVkIGFyZWFzIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIlJldmVyc2Ugb3Ntb3NpcyBicmFja2lzaCBtb2RlbCBkZXNpZ24iLAogICAgICAgICAgICAgICJwZXJtZWFiaWxpdHkiOiAiPjUtZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIsCiAgICAgICAgICAgICAgInNhbHRSZWplY3Rpb24iOiAiPDEwJSBvZiBOYUNsIGFuZCA8MzAlIG9mIE1nU080IiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZWN5Y2xpbmcgaW50byB1bHRyYWZpbHRyYXRpb24tbGlrZSBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiWzEwLDAwMC02MCwwMDBdIHBwbSBoIiwKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIHF1YWxpdGF0aXZlIjogImhpZ2giLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZW52aXJvbm1lbnRhbCByZWR1Y3Rpb24gZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcyI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIlszMi02M10iLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJsb3cgIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQsIHByZS10cmVhdG1lbnQgZm9yIGRlc2FsaW5hdGlvbiBwcm9jZXNzZXMsIGdyYXZpdHktZHJpdmVuIHdhdGVyIHRyZWF0bWVudCAoZ3JleSwgdXJiYW4gd2F0ZXIgYW5kIGRyaW5raW5nIHdhdGVyKSIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJSZXZlcnNlIG9zbW9zaXMgc2VhIG1vZGVsIGRlc2lnbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICI8MS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZWdlbmVyYXRlIHRvIHJldXNlIGFzIHJldmVyc2Ugb3Ntb3NpcyBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiPCA0LDAwMCBwcG0gaCAiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAibG93IiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCArKyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIGNvc3QgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbnRpdGF0aXZlIOKCrCI6ICJbMzMtNjNdIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2ggKysiLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAibWVkaXVtIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiTGFuZGZpbGwgbGVhY2hhdGUgdHJlYXRtZW50LCBXYXN0ZXdhdGVyIHRyZWF0bWVudCBmb3Igd2F0ZXIgcmV1c2UsIG1pbmVyLCBzd2luZSB0cmVhdG1lbnQsIGJyYWNraXNoIHdhdGVyIGRlc2FsaW5hdGlvbiBmb3IgaXJyaWdhdGlvbiBvciBvdGhlciB1c2VzIGV4Y2VwdGluZyBkcmlua2luZyB3YXRlciAoaW5zdGFsYXRpb24gaW4gdGhlIHNlY29uZCBzdGFnZSBvZiB0aGUgcHJvY2Vzcywgc2Vhd2F0ZXIgcHJvY2VzcyB0byB0cmVhdCB0aGUgY29uY2VudHJhdGUiICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogewogICAgICAgICAgICAgICJ0eXBlTWVtYnJhbmUiOiAiUmV2ZXJzZSBvc21vc2lzIHNlYSBtb2RlbCBkZXNpZ24iLAogICAgICAgICAgICAgICJwZXJtZWFiaWxpdHkiOiAiPDEtZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIsCiAgICAgICAgICAgICAgInNhbHRSZWplY3Rpb24iOiAiPjEwJSBvZiBOYUNsIGFuZCA+MzAlIG9mIE1nU080IiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZWN5Y2xpbmcgaW50byBuYW5vZmlsdHJhdGlvbi1saWtlIG1lbWJyYW5lcyIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1cnZleTJSZXN1bHQ6IHsKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIChwcG0gaCkgYWNjb3JkaW5nIHRvIHRoZSBwYXRlbnQgUENUL0VQMjAxNi8zMDkzMSI6ICJbNCwwMDAtMTUwLDAwMF0gcHBtIGgiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAibWVkaXVtICIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIGNvc3QgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbnRpdGF0aXZlIOKCrCI6ICJbMzMtNjNdIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2ggKyIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiTGFuZGZpbGwgbGVhY2hhdGUgdHJlYXRtZW50LCBXYXN0ZXdhdGVyIHRyZWF0bWVudCBmb3Igd2F0ZXIgcmV1c2UsIG1pbmVyLCBzd2luZSB0cmVhdG1lbnQsIGJyYWNraXNoIHdhdGVyIGRlc2FsaW5hdGlvbiBmb3IgaXJyaWdhdGlvbiBvciBvdGhlciB1c2VzIGV4Y2VwdGluZyBkcmlua2luZyB3YXRlciAoaW5zdGFsYXRpb24gaW4gdGhlIHNlY29uZCBzdGFnZSBvZiB0aGUgcHJvY2Vzcywgc2Vhd2F0ZXIgcHJvY2VzcyB0byB0cmVhdCB0aGUgY29uY2VudHJhdGUiICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogewogICAgICAgICAgICAgICJ0eXBlTWVtYnJhbmUiOiAiUmV2ZXJzZSBvc21vc2lzIHNlYSBtb2RlbCBkZXNpZ24iLAogICAgICAgICAgICAgICJwZXJtZWFiaWxpdHkiOiAiPDEtZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIsCiAgICAgICAgICAgICAgInNhbHRSZWplY3Rpb24iOiAiPDEwJSBvZiBOYUNsIGFuZCA8MzAlIG9mIE1nU080IiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZWN5Y2xpbmcgaW50byB1bHRyYWZpbHRyYXRpb24tbGlrZSBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiWzMwLDAwMC00MDAsMDAwXSBwcG0gaCIsCiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSBxdWFsaXRhdGl2ZSI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiWzQyLTYzXSIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoICIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJsb3cgIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQsIHByZS10cmVhdG1lbnQgZm9yIGRlc2FsaW5hdGlvbiBwcm9jZXNzZXMsIGdyYXZpdHktZHJpdmVuIHdhdGVyIHRyZWF0bWVudCAoZ3JleSwgdXJiYW4gd2F0ZXIgYW5kIGRyaW5raW5nIHdhdGVyKSIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJSZXZlcnNlIG9zbW9zaXMgc2VhIG1vZGVsIGRlc2lnbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICJbMS01XS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZXVzZSBhcyByZXZlcnNlIG9zbW9zaXMgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIjAiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAiTm90IHJlcXVpcmVkIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiTGFuZGZpbGwgbGVhY2hhdGUgdHJlYXRtZW50LCBXYXN0ZXdhdGVyIHRyZWF0bWVudCBmb3Igd2F0ZXIgcmV1c2UsIG1pbmVyLCBzd2luZSB0cmVhdG1lbnQsIGJyYWNraXNoIHdhdGVyIGRlc2FsaW5hdGlvbiBmb3IgaXJyaWdhdGlvbiBvciBvdGhlciB1c2VzIGV4Y2VwdGluZyBkcmlua2luZyB3YXRlciAoaW5zdGFsYXRpb24gaW4gdGhlIHNlY29uZCBzdGFnZSBvZiB0aGUgcHJvY2Vzcywgc2Vhd2F0ZXIgcHJvY2VzcyB0byB0cmVhdCB0aGUgY29uY2VudHJhdGUiICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29kZTogewogICAgICAgICAgICAgICJ0eXBlTWVtYnJhbmUiOiAiUmV2ZXJzZSBvc21vc2lzIHNlYSBtb2RlbCBkZXNpZ24iLAogICAgICAgICAgICAgICJwZXJtZWFiaWxpdHkiOiAiWzEtNV0tZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIsCiAgICAgICAgICAgICAgInNhbHRSZWplY3Rpb24iOiAiPjEwJSBvZiBOYUNsIGFuZCA+MzAlIG9mIE1nU080IiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZXVzZSBhcyBuYW5vZmlsdHJhdGlvbi1saWtlIG1lbWJyYW5lcyIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1cnZleTJSZXN1bHQ6IHsKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIChwcG0gaCkgYWNjb3JkaW5nIHRvIHRoZSBwYXRlbnQgUENUL0VQMjAxNi8zMDkzMSI6ICIwIiwKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIHF1YWxpdGF0aXZlIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZW52aXJvbm1lbnRhbCByZWR1Y3Rpb24gZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcyI6ICJoaWdoICsrKyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIGNvc3QgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbnRpdGF0aXZlIOKCrCI6ICIwIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogIk5vdCByZXF1aXJlZCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBhcHBsaWNhdGlvbiBvZiB0aGUgc2Vjb25kIGhhbmQgbWVtYnJhbmVzIjogIkxhbmRmaWxsIGxlYWNoYXRlIHRyZWF0bWVudCwgV2FzdGV3YXRlciB0cmVhdG1lbnQgZm9yIHdhdGVyIHJldXNlLCBtaW5lciwgc3dpbmUgdHJlYXRtZW50LCBicmFja2lzaCB3YXRlciBkZXNhbGluYXRpb24gZm9yIGlycmlnYXRpb24gb3Igb3RoZXIgdXNlcyBleGNlcHRpbmcgZHJpbmtpbmcgd2F0ZXIgKGluc3RhbGF0aW9uIGluIHRoZSBzZWNvbmQgc3RhZ2Ugb2YgdGhlIHByb2Nlc3MsIHNlYXdhdGVyIHByb2Nlc3MgdG8gdHJlYXQgdGhlIGNvbmNlbnRyYXRlIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIlJldmVyc2Ugb3Ntb3NpcyBzZWEgbW9kZWwgZGVzaWduIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIlsxLTVdLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxMCUgb2YgTmFDbCBhbmQgPDMwJSBvZiBNZ1NPNCIsCiAgICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiUmVjeWNsaW5nIGludG8gdWx0cmFmaWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIlsyMCwwMDAtMjAwLDAwMF0gcHBtIGgiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2giLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiWzQyLTYzXSIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogImxvdyAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgYXBwbGljYXRpb24gb2YgdGhlIHNlY29uZCBoYW5kIG1lbWJyYW5lcyI6ICJXYXN0ZXdhdGVyIHRyZWF0bWVudCwgcHJlLXRyZWF0bWVudCBmb3IgZGVzYWxpbmF0aW9uIHByb2Nlc3NlcywgZ3Jhdml0eS1kcml2ZW4gd2F0ZXIgdHJlYXRtZW50IChncmV5LCB1cmJhbiB3YXRlciBhbmQgZHJpbmtpbmcgd2F0ZXIpIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIlJldmVyc2Ugb3Ntb3NpcyBzZWEgbW9kZWwgZGVzaWduIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIlsxLTVdLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxNSUgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJldXNlIGFzIHJldmVyc2Ugb3Ntb3NpcyBtZW1icmFuZXMiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJ2ZXkyUmVzdWx0OiB7CiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSAocHBtIGgpIGFjY29yZGluZyB0byB0aGUgcGF0ZW50IFBDVC9FUDIwMTYvMzA5MzEiOiAiMCIsCiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSBxdWFsaXRhdGl2ZSI6ICIwIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoICsrKyIsCiAgICAgICAgICAgICAgIlNraWxsZWQgY3JldyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb24taGFuZCBtZW1icmFuZSBwcm9kdWN0aW9uICI6ICJOb3QgcmVxdWlyZWQiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgYXBwbGljYXRpb24gb2YgdGhlIHNlY29uZCBoYW5kIG1lbWJyYW5lcyI6ICJMYW5kZmlsbCBsZWFjaGF0ZSB0cmVhdG1lbnQsIFdhc3Rld2F0ZXIgdHJlYXRtZW50IGZvciB3YXRlciByZXVzZSwgbWluZXIsIHN3aW5lIHRyZWF0bWVudCwgYnJhY2tpc2ggd2F0ZXIgZGVzYWxpbmF0aW9uIGZvciBpcnJpZ2F0aW9uIG9yIG90aGVyIHVzZXMgZXhjZXB0aW5nIGRyaW5raW5nIHdhdGVyIChpbnN0YWxhdGlvbiBpbiB0aGUgc2Vjb25kIHN0YWdlIG9mIHRoZSBwcm9jZXNzLCBzZWF3YXRlciBwcm9jZXNzIHRvIHRyZWF0IHRoZSBjb25jZW50cmF0ZSIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJSZXZlcnNlIG9zbW9zaXMgc2VhIG1vZGVsIGRlc2lnbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICI+NS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJldXNlIGFzIG5hbm9maWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIjAiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAiTm90IHJlcXVpcmVkIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIlJldmVyc2Ugb3Ntb3NpcyBzZWEgbW9kZWwgZGVzaWduIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIj41LWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxMCUgb2YgTmFDbCBhbmQgPDMwJSBvZiBNZ1NPNCIsCiAgICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiUmVjeWNsaW5nIGludG8gdWx0cmFmaWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIlsyMCwwMDAtMjAwLDAwMF0gcHBtIGgiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2giLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiWzQyLTYzXSIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogImxvdyAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgYXBwbGljYXRpb24gb2YgdGhlIHNlY29uZCBoYW5kIG1lbWJyYW5lcyI6ICJXYXN0ZXdhdGVyIHRyZWF0bWVudCwgcHJlLXRyZWF0bWVudCBmb3IgZGVzYWxpbmF0aW9uIHByb2Nlc3NlcywgZ3Jhdml0eS1kcml2ZW4gd2F0ZXIgdHJlYXRtZW50IChncmV5LCB1cmJhbiB3YXRlciBhbmQgZHJpbmtpbmcgd2F0ZXIpIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIk5hbm9maWx0cmF0aW9uIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIjwxLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxNSUgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJlZ2VuZXJhdGUgdG8gcmV1c2UgYXMgbmFub2ZpbHRyYXRpb24gbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIjwgMiw1MDAgcHBtIGggIiwKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIHF1YWxpdGF0aXZlIjogImxvdyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKysiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiWzI2LTU1XSIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoICsrIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogIm1lZGl1bSIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBhcHBsaWNhdGlvbiBvZiB0aGUgc2Vjb25kIGhhbmQgbWVtYnJhbmVzIjogIldhc3Rld2F0ZXIgdHJlYXRtZW50OyBCcmFja2lzaCB3YXRlciBkZXNhbGluYXRpb24gZm9yIGlycmlnYXRpb24gb3Igb3RoZXIgdXNlcyBleGNlcHRpbmcgZHJpbmtpbmcgd2F0ZXI7IFNlYXdhdGVyIHByb2Nlc3MgdG8gdHJlYXQgdGhlIGNvbmNlbnRyYXRlOyBJbmR1c3RyaWFsIHdhc3Rld2F0ZXI7IEZyZXNoIHdhdGVyIGZvciBpc29sYXRlZCBhcmVhcyIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJOYW5vZmlsdHJhdGlvbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICI8MS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJlY3ljbGluZyBpbnRvIHVsdHJhZmlsdHJhdGlvbi1saWtlIG1lbWJyYW5lcyIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1cnZleTJSZXN1bHQ6IHsKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIChwcG0gaCkgYWNjb3JkaW5nIHRvIHRoZSBwYXRlbnQgUENUL0VQMjAxNi8zMDkzMSI6ICJbMiw1MDAtMjUsMDAwXSBwcG0gaCIsCiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSBxdWFsaXRhdGl2ZSI6ICJtZWRpdW0gIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCArIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIlszMi02M10iLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCArIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogImxvdyAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgYXBwbGljYXRpb24gb2YgdGhlIHNlY29uZCBoYW5kIG1lbWJyYW5lcyI6ICJXYXN0ZXdhdGVyIHRyZWF0bWVudCwgcHJlLXRyZWF0bWVudCBmb3IgZGVzYWxpbmF0aW9uIHByb2Nlc3NlcywgZ3Jhdml0eS1kcml2ZW4gd2F0ZXIgdHJlYXRtZW50IChncmV5LCB1cmJhbiB3YXRlciBhbmQgZHJpbmtpbmcgd2F0ZXIpIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIk5hbm9maWx0cmF0aW9uIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIjwxLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxMCUgb2YgTmFDbCBhbmQgPDMwJSBvZiBNZ1NPNCIsCiAgICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiUmVjeWNsaW5nIGludG8gdWx0cmFmaWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIlsxNSwwMDAtMTAwLDAwMF0gcHBtIGgiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIlszMi02M10iLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCAiLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAibG93IiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQsIHByZS10cmVhdG1lbnQgZm9yIGRlc2FsaW5hdGlvbiBwcm9jZXNzZXMsIGdyYXZpdHktZHJpdmVuIHdhdGVyIHRyZWF0bWVudCAoZ3JleSwgdXJiYW4gd2F0ZXIgYW5kIGRyaW5raW5nIHdhdGVyKSIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJOYW5vZmlsdHJhdGlvbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICJbMS01XS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZXVzZSBhcyBuYW5vZmlsdHJhdGlvbi1saWtlIG1lbWJyYW5lcyIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1cnZleTJSZXN1bHQ6IHsKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIChwcG0gaCkgYWNjb3JkaW5nIHRvIHRoZSBwYXRlbnQgUENUL0VQMjAxNi8zMDkzMSI6ICIwIiwKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIHF1YWxpdGF0aXZlIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZW52aXJvbm1lbnRhbCByZWR1Y3Rpb24gZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcyI6ICJoaWdoICsrKyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIGNvc3QgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbnRpdGF0aXZlIOKCrCI6ICIwIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogIk5vdCByZXF1aXJlZCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBhcHBsaWNhdGlvbiBvZiB0aGUgc2Vjb25kIGhhbmQgbWVtYnJhbmVzIjogIldhc3Rld2F0ZXIgdHJlYXRtZW50OyBCcmFja2lzaCB3YXRlciBkZXNhbGluYXRpb24gZm9yIGlycmlnYXRpb24gb3Igb3RoZXIgdXNlcyBleGNlcHRpbmcgZHJpbmtpbmcgd2F0ZXI7IFNlYXdhdGVyIHByb2Nlc3MgdG8gdHJlYXQgdGhlIGNvbmNlbnRyYXRlOyBJbmR1c3RyaWFsIHdhc3Rld2F0ZXI7IEZyZXNoIHdhdGVyIGZvciBpc29sYXRlZCBhcmVhcyIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJOYW5vZmlsdHJhdGlvbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICJbMS01XS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJldXNlIGFzIG5hbm9maWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIjAiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAiTm90IHJlcXVpcmVkIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQ7IEJyYWNraXNoIHdhdGVyIGRlc2FsaW5hdGlvbiBmb3IgaXJyaWdhdGlvbiBvciBvdGhlciB1c2VzIGV4Y2VwdGluZyBkcmlua2luZyB3YXRlcjsgU2Vhd2F0ZXIgcHJvY2VzcyB0byB0cmVhdCB0aGUgY29uY2VudHJhdGU7IEluZHVzdHJpYWwgd2FzdGV3YXRlcjsgRnJlc2ggd2F0ZXIgZm9yIGlzb2xhdGVkIGFyZWFzIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIk5hbm9maWx0cmF0aW9uIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIlsxLTVdLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxMCUgb2YgTmFDbCBhbmQgPDMwJSBvZiBNZ1NPNCIsCiAgICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiUmVjeWNsaW5nIGludG8gdWx0cmFmaWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIlsxMCwwMDAtNjAsMDAwXSBwcG0gaCIsCiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSBxdWFsaXRhdGl2ZSI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIGNvc3QgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbnRpdGF0aXZlIOKCrCI6ICJbMzItNjNdIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2giLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAibG93IiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQsIHByZS10cmVhdG1lbnQgZm9yIGRlc2FsaW5hdGlvbiBwcm9jZXNzZXMsIGdyYXZpdHktZHJpdmVuIHdhdGVyIHRyZWF0bWVudCAoZ3JleSwgdXJiYW4gd2F0ZXIgYW5kIGRyaW5raW5nIHdhdGVyKSIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJOYW5vZmlsdHJhdGlvbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICI+NS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6ICJSZXVzZSBhcyBuYW5vZmlsdHJhdGlvbi1saWtlIG1lbWJyYW5lcyIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1cnZleTJSZXN1bHQ6IHsKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIChwcG0gaCkgYWNjb3JkaW5nIHRvIHRoZSBwYXRlbnQgUENUL0VQMjAxNi8zMDkzMSI6ICIwIiwKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIHF1YWxpdGF0aXZlIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZW52aXJvbm1lbnRhbCByZWR1Y3Rpb24gZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcyI6ICJoaWdoICsrKyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIGNvc3QgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbnRpdGF0aXZlIOKCrCI6ICIwIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogIk5vdCByZXF1aXJlZCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBhcHBsaWNhdGlvbiBvZiB0aGUgc2Vjb25kIGhhbmQgbWVtYnJhbmVzIjogIldhc3Rld2F0ZXIgdHJlYXRtZW50OyBCcmFja2lzaCB3YXRlciBkZXNhbGluYXRpb24gZm9yIGlycmlnYXRpb24gb3Igb3RoZXIgdXNlcyBleGNlcHRpbmcgZHJpbmtpbmcgd2F0ZXI7IFNlYXdhdGVyIHByb2Nlc3MgdG8gdHJlYXQgdGhlIGNvbmNlbnRyYXRlOyBJbmR1c3RyaWFsIHdhc3Rld2F0ZXI7IEZyZXNoIHdhdGVyIGZvciBpc29sYXRlZCBhcmVhcyIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJOYW5vZmlsdHJhdGlvbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6ICI+NS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIlJldXNlIGFzIG5hbm9maWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIjAiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiMCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2ggKysrIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIjAiLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBzYXZpbmcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbGl0YXRpdmUiOiAiaGlnaCArKysiLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAiTm90IHJlcXVpcmVkIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQ7IEJyYWNraXNoIHdhdGVyIGRlc2FsaW5hdGlvbiBmb3IgaXJyaWdhdGlvbiBvciBvdGhlciB1c2VzIGV4Y2VwdGluZyBkcmlua2luZyB3YXRlcjsgU2Vhd2F0ZXIgcHJvY2VzcyB0byB0cmVhdCB0aGUgY29uY2VudHJhdGU7IEluZHVzdHJpYWwgd2FzdGV3YXRlcjsgRnJlc2ggd2F0ZXIgZm9yIGlzb2xhdGVkIGFyZWFzIiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgICAidHlwZU1lbWJyYW5lIjogIk5hbm9maWx0cmF0aW9uIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogIj41LWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiLAogICAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogIjwxMCUgb2YgTmFDbCBhbmQgPDMwJSBvZiBNZ1NPNCIsCiAgICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiUmVjeWNsaW5nIGludG8gdWx0cmFmaWx0cmF0aW9uLWxpa2UgbWVtYnJhbmVzIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIlsxMCwwMDAtNjAsMDAwXSBwcG0gaCIsCiAgICAgICAgICAgICAgIkZyZWUgY2hsb3JpbmUgZXhwb3N1cmUgZG9zZSBxdWFsaXRhdGl2ZSI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVudmlyb25tZW50YWwgcmVkdWN0aW9uIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIGNvc3QgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcywgcXVhbnRpdGF0aXZlIOKCrCI6ICJbMzItNjNdIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2giLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAibG93IiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGFwcGxpY2F0aW9uIG9mIHRoZSBzZWNvbmQgaGFuZCBtZW1icmFuZXMiOiAiV2FzdGV3YXRlciB0cmVhdG1lbnQsIHByZS10cmVhdG1lbnQgZm9yIGRlc2FsaW5hdGlvbiBwcm9jZXNzZXMsIGdyYXZpdHktZHJpdmVuIHdhdGVyIHRyZWF0bWVudCAoZ3JleSwgdXJiYW4gd2F0ZXIgYW5kIGRyaW5raW5nIHdhdGVyKSIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJSZXZlcnNlIG9zbW9zaXMgYnJhY2tpc2ggbW9kZWwgZGVzaWduIiwKICAgICAgICAgICAgICAicGVybWVhYmlsaXR5IjogbnVsbCwKICAgICAgICAgICAgICAic2FsdFJlamVjdGlvbiI6IG51bGwsCiAgICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiSW5kaXJlY3QgcmVjeWNsaW5nIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VydmV5MlJlc3VsdDogewogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgKHBwbSBoKSBhY2NvcmRpbmcgdG8gdGhlIHBhdGVudCBQQ1QvRVAyMDE2LzMwOTMxIjogIlsxMCwwMDAtMjAwLDAwMF0gcHBtIGgiLAogICAgICAgICAgICAgICJGcmVlIGNobG9yaW5lIGV4cG9zdXJlIGRvc2UgcXVhbGl0YXRpdmUiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlbnZpcm9ubWVudGFsIHJlZHVjdGlvbiBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzIjogImhpZ2giLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZWNvbm9taWNhbCBjb3N0IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YW50aXRhdGl2ZSDigqwiOiAiPjYzIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgc2F2aW5nIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbmQtaGFuZCBtZW1icmFuZXMsIHF1YWxpdGF0aXZlIjogImhpZ2giLAogICAgICAgICAgICAgICJTa2lsbGVkIGNyZXcgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uLWhhbmQgbWVtYnJhbmUgcHJvZHVjdGlvbiAiOiAiaGlnaCIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBhcHBsaWNhdGlvbiBvZiB0aGUgc2Vjb25kIGhhbmQgbWVtYnJhbmVzIjogIldhc3Rld2F0ZXIgdHJlYXRtZW50LCBwcmUtdHJlYXRtZW50IGZvciBkZXNhbGluYXRpb24gcHJvY2Vzc2VzLCBncmF2aXR5LWRyaXZlbiB3YXRlciB0cmVhdG1lbnQgKGdyZXksIHVyYmFuIHdhdGVyIGFuZCBkcmlua2luZyB3YXRlcikuIEl0IHJlcXVpcmVzIHRha2luZyBvdXQgdGhlIGZpYmVyIGdsYXNzIGNhc2luZyIgICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiB7CiAgICAgICAgICAgICAgInR5cGVNZW1icmFuZSI6ICJSZXZlcnNlIG9zbW9zaXMgc2VhIG1vZGVsIGRlc2lnbiIsCiAgICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6IG51bGwsCiAgICAgICAgICAgICAgInNhbHRSZWplY3Rpb24iOiBudWxsLAogICAgICAgICAgICAgICJtZW1icmFuZVJldXNlIjogIkluZGlyZWN0IHJlY3ljbGluZyIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1cnZleTJSZXN1bHQ6IHsKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIChwcG0gaCkgYWNjb3JkaW5nIHRvIHRoZSBwYXRlbnQgUENUL0VQMjAxNi8zMDkzMSI6ICJbMTAsMDAwLTIwMCwwMDBdIHBwbSBoIiwKICAgICAgICAgICAgICAiRnJlZSBjaGxvcmluZSBleHBvc3VyZSBkb3NlIHF1YWxpdGF0aXZlIjogImhpZ2giLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgZW52aXJvbm1lbnRhbCByZWR1Y3Rpb24gZm9yIHRoZSBwcm9kdWN0aW9uIG9mIHNlY29uZC1oYW5kIG1lbWJyYW5lcyI6ICJoaWdoIiwKICAgICAgICAgICAgICAiUG90ZW50aWFsIGVjb25vbWljYWwgY29zdCBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFudGl0YXRpdmUg4oKsIjogIj42MyIsCiAgICAgICAgICAgICAgIlBvdGVudGlhbCBlY29ub21pY2FsIHNhdmluZyBmb3IgdGhlIHByb2R1Y3Rpb24gb2Ygc2Vjb25kLWhhbmQgbWVtYnJhbmVzLCBxdWFsaXRhdGl2ZSI6ICJoaWdoIiwKICAgICAgICAgICAgICAiU2tpbGxlZCBjcmV3IGZvciB0aGUgcHJvZHVjdGlvbiBvZiBzZWNvbi1oYW5kIG1lbWJyYW5lIHByb2R1Y3Rpb24gIjogImhpZ2giLAogICAgICAgICAgICAgICJQb3RlbnRpYWwgYXBwbGljYXRpb24gb2YgdGhlIHNlY29uZCBoYW5kIG1lbWJyYW5lcyI6ICJXYXN0ZXdhdGVyIHRyZWF0bWVudCwgcHJlLXRyZWF0bWVudCBmb3IgZGVzYWxpbmF0aW9uIHByb2Nlc3NlcywgZ3Jhdml0eS1kcml2ZW4gd2F0ZXIgdHJlYXRtZW50IChncmV5LCB1cmJhbiB3YXRlciBhbmQgZHJpbmtpbmcgd2F0ZXIpIiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCgoKCiAgICAgICAgXSwKICAgICAgICBhdmFpbGFibGVfc29sdXRpb25zOiBbCiAgICAgICAgICAvLyBTdXJ2ZXkgMQogICAgICAgICAge2NvZGU6ICJMSSIsIG5hbWU6ICJMYW5kZmlsbCBkaXNwb3NhbCBvciBpbmNpbmVyYXRpb24iLCBjb2xvcjogIiNiZTUxNGUifSwKICAgICAgICAgIHtjb2RlOiAiSVIiLCBuYW1lOiAiSW5kaXJlY3QgcmVjeWNsaW5nIiwgY29sb3I6ICIjNjA0Yjc5In0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6ICJBTSIsCiAgICAgICAgICAgIG5hbWU6ICJNZW1icmFuZXMgYXJlIHN1aXRhYmxlIGZvciBhbiBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50IHRvIGxhbmRmaWxsIGRpc3Bvc2FsIG9yIGluY2luZXJhdGlvbi4iLAogICAgICAgICAgICBjb2xvcjogIiM5YWI5NTkiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiAiQU1SIiwKICAgICAgICAgICAgbmFtZTogIk1lbWJyYW5lcyBhcmUgc3VpdGFibGUgZm9yIGFuIGFsdGVybmF0aXZlIG1hbmFnZW1lbnQgdG8gbGFuZGZpbGwgZGlzcG9zYWwgb3IgaW5jaW5lcmF0aW9uLiAiICsKICAgICAgICAgICAgICAiTWVtYnJhbmVzIG1pZ2h0IG5lZWQgdG8gYmUgcmVoeWRyYXRlZCB1c2luZyA1MCUgdy93IGV0aGFub2wgZHVyaW5nIDE1IG1pbi4iLAogICAgICAgICAgICBjb2xvcjogIiNjMmQ1OWEiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiAiSUMiLAogICAgICAgICAgICBuYW1lOiAiSW50ZW5zaXZlIGNsZWFuaW5nIGJlZm9yZSBjb25zaWRlcmluZyBhbiBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50IHRvIGxhbmRmaWxsIGRpc3Bvc2FsIG9yIGluY2luZXJhdGlvbiIsCiAgICAgICAgICAgIGNvbG9yOiAiIzBjYWU1MSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6ICJORUlNIiwKICAgICAgICAgICAgbmFtZTogIk5vdCBlbm91Z2ggaW5mb3JtYXRpb24uIFBvdGVudGlhbGx5LCBtZW1icmFuZXMgYXJlIHN1aXRhYmxlIGZvciBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50LiIsCiAgICAgICAgICAgIGNvbG9yOiAiIzRkYWJjNSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6ICJORUlDIiwKICAgICAgICAgICAgbmFtZTogIk5vdCBlbm91Z2ggaW5mb3JtYXRpb24uIFBvdGVudGlhbGx5LCBhcHBseSBpbnRlbnNpdmUgY2xlYW5pbmcgYmVmb3JlIGFsdGVybmF0aXZlIG1hbmFnZW1lbnQuIiwKICAgICAgICAgICAgY29sb3I6ICIjMzU4NDliIgogICAgICAgICAgfSwKICAgICAgICAgIHtjb2RlOiAiTkVJUiIsIG5hbWU6ICJOb3QgZW5vdWdoIGluZm9ybWF0aW9uLiBQb3RlbnRpYWxseSwgaW5kaXJlY3QgcmVjeWNsaW5nLiIsIGNvbG9yOiAiI2ZmZmYwMCJ9LAogICAgICAgICAgewogICAgICAgICAgICBjb2RlOiAiSVJDIiwKICAgICAgICAgICAgbmFtZTogIkluZGlyZWN0IHJlY3ljbGluZyBvZiB0aG9zZSBtZW1icmFuZXMgcGxhY2VkIGluIHRoZSBzZWNvbmQgc3RhZ2UuIFBvdGVudGlhbGx5LCBhcHBseSBpbnRlbnNpdmUgIiArCiAgICAgICAgICAgICAgImNsZWFuaW5nIGJlZm9yZSBjb25zaWRlcmluZyBhbiBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50IGZvciB0aG9zZSBtZW1icmFuZXMgcGxhY2VkIGluIHRoZSBmaXJzdCBzdGFnZS4iLAogICAgICAgICAgICBjb2xvcjogIiNmNzk0NDciCiAgICAgICAgICB9LAogICAgICAgIF0sCiAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgIGdldF9xdWVzdGlvbl9ieV9jb2RlKGNvZGUpIHsKICAgICAgICByZXR1cm4gdGhpcy5xdWVzdGlvbnMuZmluZChxID0+IHEuY29kZSA9PSBjb2RlKTsKICAgICAgfSwKICAgICAgY2xlYXJWYWx1ZXMoKSB7CiAgICAgICAgdGhpcy5xdWVzdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgaXRlbS52YWx1ZSA9IG51bGw7CiAgICAgICAgfSk7CiAgICAgICAgY29uc29sZS5sb2coImFsbCB2YWx1ZXMgY2xlYXJlZDogIiwgdGhpcy5xdWVzdGlvbnMpOwogICAgICB9LAogICAgICAvL2Zyb250ZW5kCiAgICAgIGdldF9tZW1icmFuZV9yZXVzZV9jb2xvcigpIHsKICAgICAgICBsZXQgY29kZSA9IHRoaXMuZ2V0X21lbWJyYW5lX3JldXNlKCk7CiAgICAgICAgbGV0IHJldXNlID0gdGhpcy5tZW1icmFuZV9yZXVzZV9vcHRpb25zLmZpbmQobyA9PiBvLmNvZGUgPT0gY29kZSk7CiAgICAgICAgaWYgKHJldXNlKSByZXR1cm4gcmV1c2UuY29sb3I7CiAgICAgICAgZWxzZSByZXR1cm4gIiI7CiAgICAgIH0sCiAgICAgIGdldF9tZW1icmFuZV9yZXVzZV9vcHRpb25fYnlfY29kZShjb2RlKSB7CiAgICAgICAgaWYgKGNvZGUpIHsKICAgICAgICAgIGxldCBvcHRpb24gPSB0aGlzLm1lbWJyYW5lX3JldXNlX29wdGlvbnMuZmluZChvID0+IG8uY29kZSA9PSBjb2RlKTsKICAgICAgICAgIHJldHVybiBvcHRpb24ubmFtZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICJhbnN3ZXIgc3VydmV5IDEgdG8gZ2V0IGEgbWVtYnJhbmUgcmV1c2UiOwogICAgICB9LAogICAgICBzaG93X21lbWJyYW5lX3JldXNlKCkgewogICAgICAgIGxldCBjb2RlID0gdGhpcy5nZXRfbWVtYnJhbmVfcmV1c2UoKTsKICAgICAgICByZXR1cm4gdGhpcy5nZXRfbWVtYnJhbmVfcmV1c2Vfb3B0aW9uX2J5X2NvZGUoY29kZSk7CiAgICAgIH0sCiAgICAgIGlzX3JlbmRlcmVkKHF1ZXN0aW9uKSB7CiAgICAgICAgbGV0IGNvZGUgPSBxdWVzdGlvbi5jb2RlOwogICAgICAgIGlmIChjb2RlID09ICJXVCIpIHsKICAgICAgICAgIGlmICh0aGlzLmdldF9xdWVzdGlvbl9ieV9jb2RlKCdGJykudmFsdWUgPT0gIkRvbid0IGtub3ciKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0sCiAgICAgIGlzX2Rpc2FibGVkKHF1ZXN0aW9uKSB7CiAgICAgICAgbGV0IGNvZGUgPSBxdWVzdGlvbi5jb2RlOwogICAgICAgIGlmIChjb2RlID09ICJQViIgfHwgY29kZSA9PSAiUiIpIHsKICAgICAgICAgIGlmICh0aGlzLmF2YWlsYWJsZV9zb2x1dGlvbnMuZmluZChzID0+IHMuY29kZSA9PT0gIkxJIikgfHwgdGhpcy5hdmFpbGFibGVfc29sdXRpb25zLmZpbmQocyA9PiBzLmNvZGUgPT09ICJJUiIpKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0sCiAgICAgIHJlbW92ZV9zb2x1dGlvbnMoY29kZXMpewogICAgICAgIGZvcihsZXQgaT0wOyBpPGNvZGVzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgIGNvbnNvbGUubG9nKCJkZWxldGluZyAiK2NvZGVzW2ldKTsKICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuYXZhaWxhYmxlX3NvbHV0aW9ucy5maW5kSW5kZXgocz0+cy5jb2RlID09PSBjb2Rlc1tpXSk7CiAgICAgICAgICBpZihpbmRleCA+PSAwKXsKICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVfc29sdXRpb25zLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBpbml0X2F2YWlsYWJsZV9zb2x1dGlvbnMoKXsKICAgICAgICB0aGlzLmF2YWlsYWJsZV9zb2x1dGlvbnM9WwogICAgICAgICAgLy8gU3VydmV5IDEKICAgICAgICAgIHtjb2RlOiJMSSIsIG5hbWU6IkxhbmRmaWxsIGRpc3Bvc2FsIG9yIGluY2luZXJhdGlvbiIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoiI2JlNTE0ZSJ9LAogICAgICAgICAge2NvZGU6IklSIiwgbmFtZToiSW5kaXJlY3QgcmVjeWNsaW5nIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiIjNjA0Yjc5In0sCiAgICAgICAgICB7Y29kZToiQU0iLCBuYW1lOiJNZW1icmFuZXMgYXJlIHN1aXRhYmxlIGZvciBhbiBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50IHRvIGxhbmRmaWxsIGRpc3Bvc2FsIG9yIGluY2luZXJhdGlvbi4iLCAgICAgICAgY29sb3I6IiM5YWI5NTkifSwKICAgICAgICAgIHtjb2RlOiJBTVIiLCBuYW1lOiJNZW1icmFuZXMgYXJlIHN1aXRhYmxlIGZvciBhbiBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50IHRvIGxhbmRmaWxsIGRpc3Bvc2FsIG9yIGluY2luZXJhdGlvbi4gIiArCiAgICAgICAgICAgICAgIk1lbWJyYW5lcyBtaWdodCBuZWVkIHRvIGJlIHJlaHlkcmF0ZWQgdXNpbmcgNTAlIHcvdyBldGhhbm9sIGR1cmluZyAxNSBtaW4uIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IiNjMmQ1OWEifSwKICAgICAgICAgIHtjb2RlOiJJQyIsIG5hbWU6IkludGVuc2l2ZSBjbGVhbmluZyBiZWZvcmUgY29uc2lkZXJpbmcgYW4gYWx0ZXJuYXRpdmUgbWFuYWdlbWVudCB0byBsYW5kZmlsbCBkaXNwb3NhbCAiICsKICAgICAgICAgICAgICAib3IgaW5jaW5lcmF0aW9uIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoiIzBjYWU1MSJ9LAogICAgICAgICAge2NvZGU6Ik5FSU0iLCBuYW1lOiJOb3QgZW5vdWdoIGluZm9ybWF0aW9uLiBQb3RlbnRpYWxseSwgbWVtYnJhbmVzIGFyZSBzdWl0YWJsZSBmb3IgYWx0ZXJuYXRpdmUgbWFuYWdlbWVudC4iLCAgICAgICAgIGNvbG9yOiIjNGRhYmM1In0sCiAgICAgICAgICB7Y29kZToiTkVJQyIsIG5hbWU6Ik5vdCBlbm91Z2ggaW5mb3JtYXRpb24uIFBvdGVudGlhbGx5LCBhcHBseSBpbnRlbnNpdmUgY2xlYW5pbmcgYmVmb3JlIGFsdGVybmF0aXZlIG1hbmFnZW1lbnQuIiwgICAgY29sb3I6IiMzNTg0OWIifSwKICAgICAgICAgIHtjb2RlOiJORUlSIiwgbmFtZToiTm90IGVub3VnaCBpbmZvcm1hdGlvbi4gUG90ZW50aWFsbHksIGluZGlyZWN0IHJlY3ljbGluZy4iLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoiI2ZmZmYwMCJ9LAogICAgICAgICAge2NvZGU6IklSQyIsIG5hbWU6IkluZGlyZWN0IHJlY3ljbGluZyBvZiB0aG9zZSBtZW1icmFuZXMgcGxhY2VkIGluIHRoZSBzZWNvbmQgc3RhZ2UuIFBvdGVudGlhbGx5LCAiICsKICAgICAgICAgICAgICAiYXBwbHkgaW50ZW5zaXZlIGNsZWFuaW5nIGJlZm9yZSBjb25zaWRlcmluZyBhbiBhbHRlcm5hdGl2ZSBtYW5hZ2VtZW50IGZvciB0aG9zZSBtZW1icmFuZXMgIiArCiAgICAgICAgICAgICAgInBsYWNlZCBpbiB0aGUgZmlyc3Qgc3RhZ2UuIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IiNmNzk0NDcifSwKICAgICAgICBdCiAgICAgIH0sCiAgICAgIGdldF9tZW1icmFuZV9yZXVzZSgpewogICAgICAgIHRoaXMuaW5pdF9hdmFpbGFibGVfc29sdXRpb25zKCk7CiAgICAgICAgbGV0IGdldF9xdWVzdGlvbiA9IHRoaXMuZ2V0X3F1ZXN0aW9uX2J5X2NvZGU7CiAgICAgICAgbGV0IHR5cGUgPSBnZXRfcXVlc3Rpb24oIlQiKS52YWx1ZTsKICAgICAgICBsZXQgY29uZmlnID0gZ2V0X3F1ZXN0aW9uKCJDIikudmFsdWU7CiAgICAgICAgbGV0IHNpemUgPSBnZXRfcXVlc3Rpb24oIlMiKS52YWx1ZTsKICAgICAgICBsZXQgd2VpZ2h0ID0gZ2V0X3F1ZXN0aW9uKCJXIikudmFsdWU7CiAgICAgICAgbGV0IGV4dF9kYW1hZ2UgPSBnZXRfcXVlc3Rpb24oIkVEIikudmFsdWU7CiAgICAgICAgbGV0IGZvdWxpbmcgPSB0aGlzLmdldF9mb3VsaW5nX3R5cGUoKTsKICAgICAgICBsZXQgc3RvcmFnZSA9IGdldF9xdWVzdGlvbigiU1QiKS52YWx1ZTsKICAgICAgICBsZXQgc3RvcmFnZV9kdXJhdGlvbiA9IGdldF9xdWVzdGlvbigiRCIpLnZhbHVlOwogICAgICAgIGxldCBjYXVzZV9yZXBsYWNlbWVudCA9IGdldF9xdWVzdGlvbigiUlAiKS52YWx1ZTsKICAgICAgICBsZXQgcG9zaXRpb24gPSBnZXRfcXVlc3Rpb24oIlAiKS52YWx1ZTsKCiAgICAgICAgLy9UeXBlIG9mIG1lbWJyYW5lCiAgICAgICAgaWYodHlwZSA9PSAiT3RoZXIiKXsKICAgICAgICAgIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIklSIiwgIkFNIiwgIkFNUiIsICJJQyIsICJORUlNIiwgIk5FSUMiLCAiTkVJUiIsICJJUkMiXSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYodHlwZSA9PSAiVWx0cmFmaWx0cmF0aW9uIil7CiAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJJUiIsICJBTSIsICJBTVIiLCAiSUMiLCAiTkVJTSIsICJORUlDIiwgIk5FSVIiLCAiSVJDIl0pOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmKHR5cGUgPT0gIk1pY3JvZmlsdHJhdGlvbiIpewogICAgICAgICAgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiSVIiLCAiQU0iLCAiQU1SIiwgIklDIiwgIk5FSU0iLCAiTkVJQyIsICJORUlSIiwgIklSQyJdKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZih0eXBlID09ICJSZXZlcnNlIG9zbW9zaXMgYnJhY2tpc2ggbW9kZWwgZGVzaWduIiB8fCB0eXBlID09ICJSZXZlcnNlIG9zbW9zaXMgc2VhIG1vZGVsIGRlc2lnbiIgfHwgdHlwZSA9PSAiTmFub2ZpbHRyYXRpb24iKXsKICAgICAgICAgIC8vTWVtYnJhbmUgY29uZmlndXJhdGlvbgogICAgICAgICAgaWYoY29uZmlnID09ICJPdGhlciIpewogICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJJUiIsICJBTSIsICJBTVIiLCAiSUMiLCAiTkVJTSIsICJORUlDIiwgIk5FSVIiLCAiSVJDIl0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmKGNvbmZpZyA9PSAiU3BpcmFsLXdvdW5kIil7CiAgICAgICAgICAgIC8vTWVtYnJhbmUgc2l6ZQogICAgICAgICAgICBpZihzaXplID09ICJPdGhlciIpewogICAgICAgICAgICAgIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIklSIiwgIkFNIiwgIkFNUiIsICJJQyIsICJORUlNIiwgIk5FSUMiLCAiTkVJUiIsICJJUkMiXSk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYoc2l6ZSA9PSAiTGVuZ3RoOiAxbS4gRGlhbWV0ZXI6IDAuMm0iKXsKICAgICAgICAgICAgICAvL01lbWJyYW5lIHdlaWdodAogICAgICAgICAgICAgIGlmKHdlaWdodCA9PSAiPjI1a2ciKXsKICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIklSIiwgIkFNIiwgIkFNUiIsICJJQyIsICJORUlNIiwgIk5FSUMiLCAiTkVJUiIsICJJUkMiXSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgaWYod2VpZ2h0ID09ICI8MTdrZyIgfHwgd2VpZ2h0ID09ICIxNy0yNSBrZyIpewogICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsgIkxJIl0pOwogICAgICAgICAgICAgICAgLy9FeHRlcm5hbCBkYW1hZ2UKICAgICAgICAgICAgICAgIGlmKGV4dF9kYW1hZ2UgPT0gIlllcyIpewogICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyAiQU0iLCAiQU1SIiwgIklDIiwgIk5FSU0iLCAiTkVJQyIsICJORUlSIiwgIklSQyJdKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfWVsc2UgaWYgKGV4dF9kYW1hZ2UgPT0gIk5vIikgewogICAgICAgICAgICAgICAgICAvL0ZvdWxpbmcKICAgICAgICAgICAgICAgICAgaWYgKGZvdWxpbmcgPT0gIklub3JnYW5pYyBzY2FsaW5nIikgewogICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIkFNIiwgIkFNUiIsICJJUkMiXSk7CiAgICAgICAgICAgICAgICAgICAgLy9NZW1icmFuZSBzdG9yYWdlCiAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2UgPT0gIkltbWVyc2VkIGluIGEgd2F0ZXIgc29sdXRpb24iIHx8IHN0b3JhZ2UgPT0gIldldCIpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vV2VpZ2h0CiAgICAgICAgICAgICAgICAgICAgICBpZiAod2VpZ2h0ID09ICIxNy0yNSBrZyIpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJJQyIsICJORUlNIiwgIk5FSUMiLCAiTkVJUiJdKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAod2VpZ2h0ID09ICI8MTdrZyIpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJJUiIsICJORUlNIiwgIk5FSUMiLCAiTkVJUiJdKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RvcmFnZSA9PSAiRHJ5Iil7CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJJQyIsICJORUlNIiwgIk5FSUMiLCAiTkVJUiJdKTsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZm91bGluZyA9PSAiT3RoZXIiKSB7CiAgICAgICAgICAgICAgICAgICAgLy9NZW1icmFuZSBzdG9yYWdlCiAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2UgPT0gIkltbWVyc2VkIGluIGEgd2F0ZXIgc29sdXRpb24iIHx8IHN0b3JhZ2UgPT0gIldldCIpIHsKICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIklSIiwgIkFNUiIsICJJUkMiXSk7CiAgICAgICAgICAgICAgICAgICAgICAvL1dlaWdodAogICAgICAgICAgICAgICAgICAgICAgaWYgKHdlaWdodCA9PSAiMTctMjUga2ciKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiQU0iLCAiTkVJTSIsICJORUlDIiwgIk5FSVIiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdlaWdodCA9PSAiPDE3a2ciKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiSUMiLCAiTkVJTSIsICJORUlDIiwgIk5FSVIiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0b3JhZ2UgPT0gIkRyeSIpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vRHVyYXRpb24gb2Ygc3RvcmFnZSBhZnRlciB0aGUgcmVwbGFjZW1lbnQKICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIkFNIl0pOwogICAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2VfZHVyYXRpb24gPT0gIjwxIG1vbnRoIikgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJBTVIiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vV2VpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3ZWlnaHQgPT0gIjE3LTI1IGtnIikgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PSAiU2luZ2xlIHBhc3MiIHx8IHBvc2l0aW9uID09ICJEb3VibGUgcGFzcyAtIHNpbmdsZSBzdGFnZSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vKjFhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlNIiwgIk5FSUMiLCAiTkVJUiIsICJJUkMiLCAiSVIiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHBvc2l0aW9uID09ICJNaXgiICYmIGNhdXNlX3JlcGxhY2VtZW50ID09ICJHcmFudGVkIGJ1ZGdldCBmb3IgcmVwbGFjZW1lbnQiKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vKjFiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlNIiwgIk5FSUMiLCAiTkVJUiIsICJJUkMiLCAiSVIiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PSAiTWl4IiAmJiAoY2F1c2VfcmVwbGFjZW1lbnQgPT0gIk9wZXJhdGluZyBtb3JlIHRoYW4gdGhlIGV4cGVjdGVkIGxpZmVzcGFuIiB8fCBjYXVzZV9yZXBsYWNlbWVudCA9PSAiTG9zdCBvZiBtZW1icmFuZSBpbnRlZ3JpdHkiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8qMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlDIiwgIk5FSVIiLCAiSUMiLCAiSVIiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PSAiRG91YmxlIHBhc3MgLSBkb3VibGUgc3RhZ2UiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyozCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlNIiwgIk5FSUMiLCAiTkVJUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdlaWdodCA9PSAiPDE3a2ciKXsKICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlNIiwgIk5FSUMiLCAiTkVJUiIsICJJUkMiLCAiSVIiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0b3JhZ2VfZHVyYXRpb24gPT0gIj4xIG1vbnRoIikgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJJQyIsICJBTSIsICJJUkMiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vV2VpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3ZWlnaHQgPT0gIjE3LTI1IGtnIil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlDIiwgIk5FSVIiLCAiQU1SIl0pOwogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh3ZWlnaHQgPT0gIjwxN2tnIil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlDIiwgIk5FSVIiLCAiSVIiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vQ29tcGxlbWVudGFyeSBpbmZvcm1hdGlvbiB0byB0aGUgZGVjaXNpb24tbWFraW5nIHRyZWUKICAgICAgICBpZigodHlwZSA9PSAiUmV2ZXJzZSBvc21vc2lzIGJyYWNraXNoIG1vZGVsIGRlc2lnbiIgfHwgdHlwZSA9PSAiUmV2ZXJzZSBvc21vc2lzIHNlYSBtb2RlbCBkZXNpZ24iIHx8IHR5cGUgPT0gIk5hbm9maWx0cmF0aW9uIikgJiYgY29uZmlnID09ICJTcGlyYWwtd291bmQiICYmIHNpemUgPT0gIkxlbmd0aDogMW0uIERpYW1ldGVyOiAwLjJtIikgewogICAgICAgICAgaWYgKHdlaWdodCA9PSAiPDE3a2ciICYmIChleHRfZGFtYWdlID09ICJObyIgfHwgZXh0X2RhbWFnZSA9PSAiRG9uJ3Qga25vdyIpICYmIChmb3VsaW5nID09ICJPdGhlciIgfHwgZm91bGluZyA9PSAiRG9uJ3Qga25vdyIpKSB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlDIiwgIk5FSVIiLCAiSVIiLCAiTEkiLCAiQU0iLCAiQU1SIiwgIklDIiwgIklSQyJdKTsKICAgICAgICAgIGVsc2UgaWYod2VpZ2h0ID09ICIxNy0yNSBrZyIpewogICAgICAgICAgICBpZiAoKHN0b3JhZ2UgPT0gIkltbWVyc2VkIGluIGEgd2F0ZXIgc29sdXRpb24iIHx8IHN0b3JhZ2UgPT0gIldldCIpICYmIChleHRfZGFtYWdlID09ICJObyIgfHwgZXh0X2RhbWFnZSA9PSAiRG9uJ3Qga25vdyIpICYmIGZvdWxpbmcgPT0gIkRvbid0IGtub3ciKSB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlNIiwgIk5FSVIiLCAiSVIiLCAiTEkiLCAiQU0iLCAiQU1SIiwgIklDIiwgIklSQyJdKTsKICAgICAgICAgICAgZWxzZSBpZiAoKHBvc2l0aW9uID09ICJTaW5nbGUgcGFzcyIgfHwgcG9zaXRpb24gPT0gIkRvdWJsZSBwYXNzIC0gc2luZ2xlIHN0YWdlIikgJiYgc3RvcmFnZSA9PSAiRHJ5IiAmJiBzdG9yYWdlX2R1cmF0aW9uID09ICI8MSBtb250aCIgJiYgZXh0X2RhbWFnZSA9PSAiRG9uJ3Qga25vdyIgJiYgZm91bGluZyA9PSAiRG9uJ3Qga25vdyIpIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIk5FSU0iLCAiTkVJUiIsICJJUiIsICJMSSIsICJBTSIsICJBTVIiLCAiSUMiLCAiSVJDIl0pOwogICAgICAgICAgICBlbHNlIGlmIChjYXVzZV9yZXBsYWNlbWVudCA9PSAiR3JhbnRlZCBidWRnZXQgZm9yIHJlcGxhY2VtZW50IiAmJiAocG9zaXRpb24gPT0gIlNpbmdsZSBwYXNzIiB8fCBwb3NpdGlvbiA9PSAiRG91YmxlIHBhc3MgLSBzaW5nbGUgc3RhZ2UiIHx8IHBvc2l0aW9uID09ICJNaXgiKSAmJiBzdG9yYWdlID09ICJEcnkiICYmIHN0b3JhZ2VfZHVyYXRpb24gPT0gIjwxIG1vbnRoIiAmJiBleHRfZGFtYWdlID09ICJEb24ndCBrbm93IiAmJiBmb3VsaW5nID09ICJEb24ndCBrbm93IikgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlSIiwgIklSIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKGNhdXNlX3JlcGxhY2VtZW50ID09ICJPcGVyYXRpbmcgbW9yZSB0aGFuIHRoZSBleHBlY3RlZCBsaWZlc3BhbiIgJiYgcG9zaXRpb24gPT0gIkRvbid0IGtub3ciICYmIHN0b3JhZ2UgPT0gIkRyeSIgJiYgc3RvcmFnZV9kdXJhdGlvbiA9PSAiPDEgbW9udGgiICYmIGV4dF9kYW1hZ2UgPT0gIkRvbid0IGtub3ciICYmIGZvdWxpbmcgPT0gIkRvbid0IGtub3ciKSB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlNIiwgIk5FSVIiLCAiSVIiLCAiTEkiLCAiQU0iLCAiQU1SIiwgIklDIiwgIklSQyJdKTsKICAgICAgICAgICAgZWxzZSBpZiAoY2F1c2VfcmVwbGFjZW1lbnQgPT0gIkRvbid0IGtub3ciICYmIHBvc2l0aW9uID09ICJEb24ndCBrbm93IiAmJiBzdG9yYWdlID09ICJEcnkiICYmIHN0b3JhZ2VfZHVyYXRpb24gPT0gIjwxIG1vbnRoIiAmJiBleHRfZGFtYWdlID09ICJEb24ndCBrbm93IiAmJiBmb3VsaW5nID09ICJEb24ndCBrbm93IikgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlSIiwgIklSIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKChwb3NpdGlvbiA9PSAiU2luZ2xlIHBhc3MiIHx8IHBvc2l0aW9uID09ICJEb3VibGUgcGFzcyAtIHNpbmdsZSBzdGFnZSIpICYmIHN0b3JhZ2UgPT0gIkRvbid0IGtub3ciICYmIHN0b3JhZ2VfZHVyYXRpb24gPT0gIjwxIG1vbnRoIiAmJiAoZXh0X2RhbWFnZSA9PSAiTm8iIHx8IGV4dF9kYW1hZ2UgPT0gIkRvbid0IGtub3ciKSAmJiAoZm91bGluZyA9PSAiTm8iIHx8IGZvdWxpbmcgPT0gIkRvbid0IGtub3ciKSkgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlSIiwgIklSIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKGNhdXNlX3JlcGxhY2VtZW50ID09ICJHcmFudGVkIGJ1ZGdldCBmb3IgcmVwbGFjZW1lbnQiICYmIHN0b3JhZ2UgPT0gIkRvbid0IGtub3ciICYmIHN0b3JhZ2VfZHVyYXRpb24gPT0gIjwxIG1vbnRoIiAmJiAoZXh0X2RhbWFnZSA9PSAiTm8iIHx8IGV4dF9kYW1hZ2UgPT0gIkRvbid0IGtub3ciKSAmJiAoZm91bGluZyA9PSAiTm8iIHx8IGZvdWxpbmcgPT0gIkRvbid0IGtub3ciKSkgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlSIiwgIklSIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKChjYXVzZV9yZXBsYWNlbWVudCA9PSAiR3JhbnRlZCBidWRnZXQgZm9yIHJlcGxhY2VtZW50IiB8fCBjYXVzZV9yZXBsYWNlbWVudCA9PSAiT3BlcmF0aW5nIG1vcmUgdGhhbiB0aGUgZXhwZWN0ZWQgbGlmZXNwYW4iKSAmJiBwb3NpdGlvbiA9PSAiRG9uJ3Qga25vdyIgJiYgc3RvcmFnZSA9PSAiRG9uJ3Qga25vdyIgJiYgc3RvcmFnZV9kdXJhdGlvbiA9PSAiPDEgbW9udGgiICYmIChleHRfZGFtYWdlID09ICJObyIgfHwgZXh0X2RhbWFnZSA9PSAiRG9uJ3Qga25vdyIpICYmIChmb3VsaW5nID09ICJObyIgfHwgZm91bGluZyA9PSAiRG9uJ3Qga25vdyIpKSB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlNIiwgIk5FSVIiLCAiSVIiLCAiTEkiLCAiQU0iLCAiQU1SIiwgIklDIiwgIklSQyJdKTsKICAgICAgICAgICAgZWxzZSBpZiAoY2F1c2VfcmVwbGFjZW1lbnQgPT0gIkxvc3Qgb2YgbWVtYnJhbmUgaW50ZWdyaXR5IiAmJiAocG9zaXRpb24gPT0gIlNpbmdsZSBwYXNzIiB8fCBwb3NpdGlvbiA9PSAiRG91YmxlIHBhc3MgLSBzaW5nbGUgc3RhZ2UiKSAmJiBzdG9yYWdlID09ICJEb24ndCBrbm93IiAmJiBzdG9yYWdlX2R1cmF0aW9uID09ICI8MSBtb250aCIgJiYgKGV4dF9kYW1hZ2UgPT0gIk5vIiB8fCBleHRfZGFtYWdlID09ICJEb24ndCBrbm93IikgJiYgKGZvdWxpbmcgPT0gIk5vIiB8fCBmb3VsaW5nID09ICJEb24ndCBrbm93IikpIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIk5FSU0iLCAiTkVJUiIsICJJUiIsICJMSSIsICJBTSIsICJBTVIiLCAiSUMiLCAiSVJDIl0pOwogICAgICAgICAgICBlbHNlIGlmIChzdG9yYWdlID09ICJEb24ndCBrbm93IiAmJiBzdG9yYWdlX2R1cmF0aW9uID09ICJEb24ndCBrbm93IiAmJiBleHRfZGFtYWdlID09ICJEb24ndCBrbm93IiAmJiBmb3VsaW5nID09ICJEb24ndCBrbm93IikgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlDIiwgIklSIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKGNhdXNlX3JlcGxhY2VtZW50ID09ICJPcGVyYXRpbmcgbW9yZSB0aGFuIHRoZSBleHBlY3RlZCBsaWZlc3BhbiIgJiYgKHBvc2l0aW9uID09ICJEb3VibGUgcGFzcyAtIGRvdWJsZSBzdGFnZSIgfHwgcG9zaXRpb24gPT0gIk1peCIpICYmIHN0b3JhZ2UgPT0gIkRvbid0IGtub3ciICYmIHN0b3JhZ2VfZHVyYXRpb24gPT0gIjwxIG1vbnRoIiAmJiAoZXh0X2RhbWFnZSA9PSAiTm8iIHx8IGV4dF9kYW1hZ2UgPT0gIkRvbid0IGtub3ciKSAmJiAoZm91bGluZyA9PSAiTm8iIHx8IGZvdWxpbmcgPT0gIkRvbid0IGtub3ciKSkgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlDIiwgIklSIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKGNhdXNlX3JlcGxhY2VtZW50ID09ICJMb3N0IG9mIG1lbWJyYW5lIGludGVncml0eSIgJiYgKHBvc2l0aW9uID09ICJEb3VibGUgcGFzcyAtIGRvdWJsZSBzdGFnZSIgfHwgcG9zaXRpb24gPT0gIk1peCIgfHwgcG9zaXRpb24gPT0gIkRvbid0IGtub3ciKSAmJiBzdG9yYWdlID09ICJEb24ndCBrbm93IiAmJiBzdG9yYWdlX2R1cmF0aW9uID09ICI8MSBtb250aCIgJiYgKGV4dF9kYW1hZ2UgPT0gIk5vIiB8fCBleHRfZGFtYWdlID09ICJEb24ndCBrbm93IikgJiYgKGZvdWxpbmcgPT0gIk5vIiB8fCBmb3VsaW5nID09ICJEb24ndCBrbm93IikpIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIk5FSU0iLCAiTkVJQyIsICJJUiIsICJMSSIsICJBTSIsICJBTVIiLCAiSUMiLCAiSVJDIl0pOwogICAgICAgICAgICBlbHNlIGlmICgocG9zaXRpb24gPT0gIkRvdWJsZSBwYXNzIC0gZG91YmxlIHN0YWdlIiB8fCBwb3NpdGlvbiA9PSAiTWl4IiB8fCBwb3NpdGlvbiA9PSAiRG9uJ3Qga25vdyIpICYmIHN0b3JhZ2UgPT0gIkRyeSIgJiYgc3RvcmFnZV9kdXJhdGlvbiA9PSAiRG9uJ3Qga25vdyIgJiYgKGV4dF9kYW1hZ2UgPT0gIk5vIiB8fCBleHRfZGFtYWdlID09ICJEb24ndCBrbm93IikgJiYgKGZvdWxpbmcgPT0gIk5vIiB8fCBmb3VsaW5nID09ICJEb24ndCBrbm93IikpIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIk5FSU0iLCAiTkVJQyIsICJJUiIsICJMSSIsICJBTSIsICJBTVIiLCAiSUMiLCAiSVJDIl0pOwogICAgICAgICAgICBlbHNlIGlmIChjYXVzZV9yZXBsYWNlbWVudCA9PSAiTG9zdCBvZiBtZW1icmFuZSBpbnRlZ3JpdHkiICYmIChwb3NpdGlvbiA9PSAiTWl4IiB8fCBwb3NpdGlvbiA9PSAiRG9uJ3Qga25vdyIpICYmICBzdG9yYWdlID09ICJEcnkiICYmIHN0b3JhZ2VfZHVyYXRpb24gPT0gIjwxIG1vbnRoIiAmJiAoZXh0X2RhbWFnZSA9PSAiTm8iIHx8IGV4dF9kYW1hZ2UgPT0gIkRvbid0IGtub3ciKSAmJiAoZm91bGluZyA9PSAiTm8iIHx8IGZvdWxpbmcgPT0gIkRvbid0IGtub3ciKSkgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlDIiwgIklSIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKGNhdXNlX3JlcGxhY2VtZW50ID09ICJEb24ndCBrbm93IiAmJiBwb3NpdGlvbiA9PSAiTWl4IiAmJiBzdG9yYWdlID09ICJEcnkiICYmIHN0b3JhZ2VfZHVyYXRpb24gPT0gIjwxIG1vbnRoIiAmJiAoZXh0X2RhbWFnZSA9PSAiTm8iIHx8IGV4dF9kYW1hZ2UgPT0gIkRvbid0IGtub3ciKSAmJiAoZm91bGluZyA9PSAiTm8iIHx8IGZvdWxpbmcgPT0gIkRvbid0IGtub3ciKSkgdGhpcy5yZW1vdmVfc29sdXRpb25zKFsiTkVJTSIsICJORUlDIiwgIklSIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKHN0b3JhZ2UgPT0gIkRyeSIgJiYgc3RvcmFnZV9kdXJhdGlvbiA9PSAiPjEgbW9udGgiKSB0aGlzLnJlbW92ZV9zb2x1dGlvbnMoWyJORUlDIiwgIk5FSVIiLCAiTkVJTSIsICJMSSIsICJBTSIsICJBTVIiLCAiSUMiLCAiSVJDIl0pOwogICAgICAgICAgICBlbHNlIGlmIChwb3NpdGlvbiA9PSAiRG91YmxlIHBhc3MgLSBkb3VibGUgc3RhZ2UiICYmIHN0b3JhZ2UgPT0gIkRyeSIpIHRoaXMucmVtb3ZlX3NvbHV0aW9ucyhbIk5FSUMiLCAiTkVJUiIsICJORUlNIiwgIkxJIiwgIkFNIiwgIkFNUiIsICJJQyIsICJJUkMiXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBnZXRfbWFuYWdlbWVudF9zdXJ2ZXkyKCkgewogICAgICAgIGxldCBnZXRfcXVlc3Rpb24gPSB0aGlzLmdldF9xdWVzdGlvbl9ieV9jb2RlOwogICAgICAgIGxldCB0eXBlID0gZ2V0X3F1ZXN0aW9uKCJUIikudmFsdWU7CiAgICAgICAgbGV0IHJlamVjdGlvbiA9IGdldF9xdWVzdGlvbigiUiIpLnZhbHVlOwogICAgICAgIGxldCBwZXJtZWFiaWxpdHkgPSBnZXRfcXVlc3Rpb24oIlBWIikudmFsdWU7CgogICAgICAgIGlmKHR5cGUgPT09IHVuZGVmaW5lZCB8fCBwZXJtZWFiaWxpdHkgPT09IHVuZGVmaW5lZCB8fCByZWplY3Rpb24gPT09IHVuZGVmaW5lZCl7CiAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgfQoKICAgICAgICAvLyBtYW5hZ2VtZW50IGFjY29yZGluZyB0byBzdXJ2ZXlfMgogICAgICAgIGlmICh0eXBlID09ICJSZXZlcnNlIG9zbW9zaXMgYnJhY2tpc2ggbW9kZWwgZGVzaWduIikgewogICAgICAgICAgaWYgKHBlcm1lYWJpbGl0eSA9PSAiPDEtZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIpIHsKICAgICAgICAgICAgaWYgKHJlamVjdGlvbiA9PSAiPDE1JSBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIpIHJldHVybiAiUmVnUk8iCiAgICAgICAgICAgIGVsc2UgaWYgKHJlamVjdGlvbiA9PSAiPjEwJSBvZiBOYUNsIGFuZCA+MzAlIG9mIE1nU080IikgcmV0dXJuICJSZWNORiIKICAgICAgICAgICAgZWxzZSBpZiAocmVqZWN0aW9uID09ICI8MTAlIG9mIE5hQ2wgYW5kIDwzMCUgb2YgTWdTTzQiKSByZXR1cm4gIlJlY1VGIgogICAgICAgICAgfSBlbHNlIGlmIChwZXJtZWFiaWxpdHkgPT0gIlsxLTVdLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiKSB7CiAgICAgICAgICAgIGlmIChyZWplY3Rpb24gPT0gIjwxNSUgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiKSByZXR1cm4gIlJldVJPIgogICAgICAgICAgICBlbHNlIGlmIChyZWplY3Rpb24gPT0gIj4xMCUgb2YgTmFDbCBhbmQgPjMwJSBvZiBNZ1NPNCIpIHJldHVybiAiUmV1TkYiCiAgICAgICAgICAgIGVsc2UgaWYgKHJlamVjdGlvbiA9PSAiPDEwJSBvZiBOYUNsIGFuZCA8MzAlIG9mIE1nU080IikgcmV0dXJuICJSZWNVRiIKICAgICAgICAgIH0gZWxzZSBpZiAocGVybWVhYmlsaXR5ID09ICI+NS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIikgewogICAgICAgICAgICBpZiAocmVqZWN0aW9uID09ICI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIikgcmV0dXJuICJSZXVSTyIKICAgICAgICAgICAgZWxzZSBpZiAocmVqZWN0aW9uID09ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiKSByZXR1cm4gIlJldU5GIgogICAgICAgICAgICBlbHNlIGlmIChyZWplY3Rpb24gPT0gIjwxMCUgb2YgTmFDbCBhbmQgPDMwJSBvZiBNZ1NPNCIpIHJldHVybiAiUmVjVUYiCiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09ICJSZXZlcnNlIG9zbW9zaXMgc2VhIG1vZGVsIGRlc2lnbiIpIHsKICAgICAgICAgIGlmIChwZXJtZWFiaWxpdHkgPT0gIjwxLWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiKSB7CiAgICAgICAgICAgIGlmIChyZWplY3Rpb24gPT0gIjwxNSUgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiKSByZXR1cm4gIlJlZ1JPIgogICAgICAgICAgICBlbHNlIGlmIChyZWplY3Rpb24gPT0gIj4xMCUgb2YgTmFDbCBhbmQgPjMwJSBvZiBNZ1NPNCIpIHJldHVybiAiUmVjTkYiCiAgICAgICAgICAgIGVsc2UgaWYgKHJlamVjdGlvbiA9PSAiPDEwJSBvZiBOYUNsIGFuZCA8MzAlIG9mIE1nU080IikgcmV0dXJuICJSZWNVRiIKICAgICAgICAgIH0gZWxzZSBpZiAocGVybWVhYmlsaXR5ID09ICJbMS01XS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIikgewogICAgICAgICAgICBpZiAocmVqZWN0aW9uID09ICI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIikgcmV0dXJuICJSZXVSTyIKICAgICAgICAgICAgZWxzZSBpZiAocmVqZWN0aW9uID09ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiKSByZXR1cm4gIlJldU5GIgogICAgICAgICAgICBlbHNlIGlmIChyZWplY3Rpb24gPT0gIjwxMCUgb2YgTmFDbCBhbmQgPDMwJSBvZiBNZ1NPNCIpIHJldHVybiAiUmVjVUYiCiAgICAgICAgICB9IGVsc2UgaWYgKHBlcm1lYWJpbGl0eSA9PSAiPjUtZm9sZCBjb21wYXJpbmcgdG8gdGhlIGRlc2lnbiB2YWx1ZSIpIHsKICAgICAgICAgICAgaWYgKHJlamVjdGlvbiA9PSAiPjEwJSBvZiBOYUNsIGFuZCA+MzAlIG9mIE1nU080IikgcmV0dXJuICJSZXVORiIKICAgICAgICAgICAgZWxzZSBpZiAocmVqZWN0aW9uID09ICI8MTAlIG9mIE5hQ2wgYW5kIDwzMCUgb2YgTWdTTzQiKSByZXR1cm4gIlJlY1VGIgogICAgICAgICAgICBlbHNlIGlmIChyZWplY3Rpb24gPT0gIjwxNSUgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiKSByZXR1cm4gIlJldVJPIgogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAiTmFub2ZpbHRyYXRpb24iKSB7CiAgICAgICAgICBpZiAocGVybWVhYmlsaXR5ID09ICI8MS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIikgewogICAgICAgICAgICBpZiAocmVqZWN0aW9uID09ICI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIikgcmV0dXJuICJSZWdORiIKICAgICAgICAgICAgZWxzZSBpZiAocmVqZWN0aW9uID09ICI+MTAlIG9mIE5hQ2wgYW5kID4zMCUgb2YgTWdTTzQiIHx8IHJlamVjdGlvbiA9PSAiPDEwJSBvZiBOYUNsIGFuZCA8MzAlIG9mIE1nU080IikgcmV0dXJuICJSZWNVRiIKICAgICAgICAgIH0gZWxzZSBpZiAocGVybWVhYmlsaXR5ID09ICJbMS01XS1mb2xkIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIiB8fCBwZXJtZWFiaWxpdHkgPT0gIj41LWZvbGQgY29tcGFyaW5nIHRvIHRoZSBkZXNpZ24gdmFsdWUiKSB7CiAgICAgICAgICAgIGlmIChyZWplY3Rpb24gPT0gIj4xMCUgb2YgTmFDbCBhbmQgPjMwJSBvZiBNZ1NPNCIgfHwgcmVqZWN0aW9uID09ICI8MTUlIGNvbXBhcmluZyB0byB0aGUgZGVzaWduIHZhbHVlIikgcmV0dXJuICJSZXVORiIKICAgICAgICAgICAgZWxzZSBpZiAocmVqZWN0aW9uID09ICI8MTAlIG9mIE5hQ2wgYW5kIDwzMCUgb2YgTWdTTzQiKSByZXR1cm4gIlJlY1VGIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gIiI7CiAgICAgIH0sCiAgICAgIGdldF9mb3VsaW5nX3R5cGUoKXsKICAgICAgICBsZXQgZ2V0X3F1ZXN0aW9uID0gdGhpcy5nZXRfcXVlc3Rpb25fYnlfY29kZTsKICAgICAgICBsZXQgZm91bGluZ192YWx1ZSA9IGdldF9xdWVzdGlvbigiRiIpLnZhbHVlOwogICAgICAgIGxldCB3YXRlcl90eXBlID0gZ2V0X3F1ZXN0aW9uKCJXVCIpLnZhbHVlOwogICAgICAgIGxldCBtZW1icmFuZV9wb3NpdGlvbiA9IGdldF9xdWVzdGlvbigiUCIpLnZhbHVlOwogICAgICAgIGlmKGZvdWxpbmdfdmFsdWUgPT0gIkRvbid0IGtub3ciKSB7CiAgICAgICAgICBpZiAod2F0ZXJfdHlwZSA9PSAiU2Vhd2F0ZXIiICYmICEobWVtYnJhbmVfcG9zaXRpb24gPT0gIkRvdWJsZSBwYXNzIC0gZG91YmxlIHN0YWdlIiB8fCBtZW1icmFuZV9wb3NpdGlvbiA9PSAiTWl4IikpIHsKICAgICAgICAgICAgcmV0dXJuICJPdGhlciI7CiAgICAgICAgICB9IGVsc2UgaWYgKHdhdGVyX3R5cGUgPT0gIlNlYXdhdGVyIiAmJiAobWVtYnJhbmVfcG9zaXRpb24gPT0gIkRvdWJsZSBwYXNzIC0gZG91YmxlIHN0YWdlIiB8fCBtZW1icmFuZV9wb3NpdGlvbiA9PSAiTWl4IikpIHsKICAgICAgICAgICAgcmV0dXJuICJJbm9yZ2FuaWMgc2NhbGluZyI7CiAgICAgICAgICB9IGVsc2UgaWYgKHdhdGVyX3R5cGUgPT0gIkJyYWNraXNoIHdhdGVyIiAmJiAhKG1lbWJyYW5lX3Bvc2l0aW9uID09ICJEb3VibGUgcGFzcyAtIGRvdWJsZSBzdGFnZSIgfHwgbWVtYnJhbmVfcG9zaXRpb24gPT0gIk1peCIpKSB7CiAgICAgICAgICAgIHJldHVybiAiT3RoZXIiOwogICAgICAgICAgfSBlbHNlIGlmICh3YXRlcl90eXBlID09ICJCcmFja2lzaCB3YXRlciIgJiYgKG1lbWJyYW5lX3Bvc2l0aW9uID09ICJEb3VibGUgcGFzcyAtIGRvdWJsZSBzdGFnZSIgfHwgbWVtYnJhbmVfcG9zaXRpb24gPT0gIk1peCIpKSB7CiAgICAgICAgICAgIHJldHVybiAiSW5vcmdhbmljIHNjYWxpbmciOwogICAgICAgICAgfSBlbHNlIGlmICh3YXRlcl90eXBlID09ICJXYXN0ZXdhdGVyIiB8fCB3YXRlcl90eXBlID09ICJGb29kIGluZHVzdHJ5IikgewogICAgICAgICAgICByZXR1cm4gIk90aGVyIjsKICAgICAgICAgIH0gZWxzZSBpZiAod2F0ZXJfdHlwZSA9PSAiQ2hlbWljYWwgaW5kdXN0cnkiKSB7CiAgICAgICAgICAgIHJldHVybiAiSW5vcmdhbmljIHNjYWxpbmciOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZvdWxpbmdfdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlCiAgICAgICAgICByZXR1cm4gZm91bGluZ192YWx1ZTsKICAgICAgfSwKICAgICAgYWRhcHRfc3VydmV5XzJfcmVzdWx0KHNvbHV0aW9uKXsKICAgICAgICAvL2xldCByZXQgPSBzb2x1dGlvbi5zdXJ2ZXkyUmVzdWx0OwogICAgICAgIGxldCBhdXggPSB7Im1lbWJyYW5lX3JldXNlIjogc29sdXRpb24uY29kZS5tZW1icmFuZVJldXNlfQogICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGF1eCwgc29sdXRpb24uc3VydmV5MlJlc3VsdCk7CiAgICAgIH0KICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICBnZXRfYXZhaWxhYmxlX3NvbHV0aW9uczogZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuZ2V0X21lbWJyYW5lX3JldXNlKCk7CiAgICAgICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlX3NvbHV0aW9uczsKICAgICAgfSwKICAgICAgcmVzdWx0X3N1cnZleV8yKCl7CiAgICAgICAgbGV0IGNvZGUgPSB0aGlzLmdldF9tYW5hZ2VtZW50X3N1cnZleTIoKTsKICAgICAgICBsZXQgc3VydmV5Mk91dHB1dCA9IHRoaXMubWVtYnJhbmVfcmV1c2Vfb3B0aW9ucy5maW5kKHE9PnEuY29kZT09Y29kZSk7CiAgICAgICAgbGV0IGF1eE9iamVjdDsKICAgICAgICBsZXQgZ2V0X3F1ZXN0aW9uID0gdGhpcy5nZXRfcXVlc3Rpb25fYnlfY29kZTsKICAgICAgICBsZXQgbWVtYnJhbmUgPSBnZXRfcXVlc3Rpb24oIlQiKS52YWx1ZTsKICAgICAgICBsZXQgcGVybSA9IGdldF9xdWVzdGlvbigiUFYiKS52YWx1ZTsKICAgICAgICBsZXQgcmVqZWN0aW9uID0gZ2V0X3F1ZXN0aW9uKCJSIikudmFsdWU7CgogICAgICAgIGlmIChzdXJ2ZXkyT3V0cHV0KSB7CiAgICAgICAgICBhdXhPYmplY3QgPSB7CiAgICAgICAgICAgICJ0eXBlTWVtYnJhbmUiOiBtZW1icmFuZSwKICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6IHBlcm0sCiAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogcmVqZWN0aW9uLAogICAgICAgICAgICAibWVtYnJhbmVSZXVzZSI6IHN1cnZleTJPdXRwdXQubmFtZSwKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIC8vSW5kaXJlY3QgUmVjeWNsaW5nCiAgICAgICAgZWxzZSBpZih0aGlzLmF2YWlsYWJsZV9zb2x1dGlvbnMubGVuZ3RoID09PSAxICYmIHRoaXMuYXZhaWxhYmxlX3NvbHV0aW9uc1swXS5jb2RlID09PSAiSVIiICYmIChtZW1icmFuZSA9PT0gIlJldmVyc2Ugb3Ntb3NpcyBicmFja2lzaCBtb2RlbCBkZXNpZ24iIHx8IG1lbWJyYW5lID09PSAiUmV2ZXJzZSBvc21vc2lzIHNlYSBtb2RlbCBkZXNpZ24iKSl7CiAgICAgICAgICBhdXhPYmplY3QgPSB7CiAgICAgICAgICAgICJ0eXBlTWVtYnJhbmUiOiBtZW1icmFuZSwKICAgICAgICAgICAgInBlcm1lYWJpbGl0eSI6IG51bGwsCiAgICAgICAgICAgICJzYWx0UmVqZWN0aW9uIjogbnVsbCwKICAgICAgICAgICAgIm1lbWJyYW5lUmV1c2UiOiAiSW5kaXJlY3QgcmVjeWNsaW5nIiwKICAgICAgICAgIH07CiAgICAgICAgfWVsc2V7CiAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfQoKICAgICAgICBsZXQgcmV0ID0gdGhpcy5tZW1icmFuZV9yZXVzZV9vcHRpb25zLmZpbmQoaSA9PiBfLmlzRXF1YWwoaS5jb2RlLCBhdXhPYmplY3QpKTsKICAgICAgICBjb25zb2xlLmxvZyhyZXQpCiAgICAgICAgaWYoIXJldCkKICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICBlbHNlCiAgICAgICAgICByZXR1cm4gW3JldF07CgogICAgICB9LAogICAgICBnZXRfc29sdXRpb25zX2Zvcl9jYXNlX3N0dWRpZXMoKSB7CiAgICAgICAgbGV0IHNvbHV0aW9ucyA9IFtdOwogICAgICAgIGxldCBhdXggPSB0aGlzLmdldF9tYW5hZ2VtZW50X3N1cnZleTIoKTsKICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMubWVtYnJhbmVfcmV1c2Vfb3B0aW9uczsKICAgICAgICBjb25zb2xlLmxvZygic29sdXRpb25zOiAiLHRoaXMuYXZhaWxhYmxlX3NvbHV0aW9ucyk7CiAgICAgICAgY29uc29sZS5sb2coImF1eDogIiwgYXV4KTsKICAgICAgICB0aGlzLmF2YWlsYWJsZV9zb2x1dGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc29sKSB7CiAgICAgICAgICBsZXQgY29kZSA9IHNvbC5jb2RlOwogICAgICAgICAgaWYoKGNvZGUgPT09ICJBTSIgfHwgY29kZSA9PT0gIkFNUiIgfHwgY29kZSA9PT0gIklDIikpewogICAgICAgICAgICBpZihhdXggIT09ICIiKXsKICAgICAgICAgICAgICBsZXQgc3VydmV5Mk91dHB1dCA9IG9wdGlvbnMuZmluZChxPT5xLmNvZGUgPT0gYXV4KTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdXJ2ZXkyT3V0cHV0KTsKICAgICAgICAgICAgICBzb2x1dGlvbnMucHVzaChzdXJ2ZXkyT3V0cHV0KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlCiAgICAgICAgICAgIHNvbHV0aW9ucy5wdXNoKHNvbCk7CiAgICAgICAgfSk7CiAgICAgICAgc29sdXRpb25zID0gWyAuLi5uZXcgU2V0KHNvbHV0aW9ucykgXTsgLy9yZW1vdmVzIGR1cGxpY2F0ZSBzb2x1dGlvbnMuCiAgICAgICAgcmV0dXJuIHNvbHV0aW9uczsKCiAgICAgIH0KICAgIH0sCgogIH0KPC9zY3JpcHQ+CgoKPHN0eWxlPgogIGEubmF2LWxpbmsgewogICAgY29sb3I6IHZhcigtLWxpZ2h0LWdyYXktcHJpbWFyeSk7CiAgICBmb250LXNpemU6IDE4cHg7CiAgICBmb250LXdlaWdodDogdmFyKC0tYm9sZC10ZXh0KTsKICB9CiAgYS5uYXYtbGluazpob3ZlciB7CiAgICBjb2xvcjogd2hpdGU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saWdodC1ncmF5LXByaW1hcnkpICFpbXBvcnRhbnQ7CiAgICBmb250LXNpemU6IDE4cHg7CiAgfQogIC5uYXYtdGFicyAubmF2LWxpbmsgewogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGUgIWltcG9ydGFudDsKICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWxpZ2h0LWdyYXktcHJpbWFyeSkgIWltcG9ydGFudDsKICAgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsKICB9CiAgLm5hdi10YWJzICNzb2x1dGlvbnNfX19CVl90YWJfYnV0dG9uX18ubmF2LWxpbmsuYWN0aXZlIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJsdWUtcHJpbWFyeSkgIWltcG9ydGFudDsKICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWJsdWUtcHJpbWFyeSkgIWltcG9ydGFudDsKICAgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsKICAgIGNvbG9yOiB3aGl0ZTsKICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1ib2xkLXRleHQpOwogIH0KICAubmF2LXRhYnMgI2Nhc2VTdHVkaWVzX19fQlZfdGFiX2J1dHRvbl9fLm5hdi1saW5rLmFjdGl2ZSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ncmVlbi1wcmltYXJ5KSAhaW1wb3J0YW50OwogICAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tZ3JlZW4tcHJpbWFyeSkgIWltcG9ydGFudDsKICAgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsKICAgIGNvbG9yOiB3aGl0ZTsKICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1ib2xkLXRleHQpOwogIH0KICAubmF2LXRhYnMgI2ZhY3RTaGVldHNfX19CVl90YWJfYnV0dG9uX18ubmF2LWxpbmsuYWN0aXZlIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXJlZC1wcmltYXJ5KSAhaW1wb3J0YW50OwogICAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tcmVkLXByaW1hcnkpICFpbXBvcnRhbnQ7CiAgICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7CiAgICBjb2xvcjogd2hpdGU7CiAgICBmb250LXdlaWdodDogdmFyKC0tYm9sZC10ZXh0KTsKICB9CiAgI19fQlZJRF9fNDhfX0JWX3RhYl9jb250YWluZXJfLnRhYi1jb250ZW50ICNzb2x1dGlvbnMgewogICAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tYmx1ZS1wcmltYXJ5KSAhaW1wb3J0YW50OwogIH0KICAjX19CVklEX180OF9fQlZfdGFiX2NvbnRhaW5lcl8udGFiLWNvbnRlbnQgI2Nhc2VTdHVkaWVzIHsKICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWdyZWVuLXByaW1hcnkpICFpbXBvcnRhbnQ7CiAgfQogICNfX0JWSURfXzQ4X19CVl90YWJfY29udGFpbmVyXy50YWItY29udGVudCAjZmFjdFNoZWV0cyB7CiAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1yZWQtcHJpbWFyeSkgIWltcG9ydGFudDsKICB9CgogIHRoLnRIZWFkZXJ7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzUxZTIzOwogICAgYm9yZGVyLXRvcDogMDsKICB9Cjwvc3R5bGU+Cgo8c3R5bGUgc2NvcGVkPgogIHRhYmxlIHsKICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CiAgfQogIHRkLCB0aCB7CiAgICBwYWRkaW5nOiAwLjJlbTsKICB9CgogIC5tZW1icmFuZV9yZXVzZSB7CiAgICBwYWRkaW5nOiAwLjZlbSAxZW07CiAgICAvL2ZvbnQtc2l6ZTogbGFyZ2U7CiAgICAvL2JvcmRlcjogMXB4IHNvbGlkICNjY2M7CiAgfQogIC5zaWRlYmFyLWhlYWRlciA+IGEgewogICAgY29sb3I6IHZhcigtLWdyZWVuLXByaW1hcnkpOwogIH0KICAuc2lkZWJhci1oZWFkZXIgewogICAgd2lkdGg6IDEwMCU7CiAgfQogIC50YWJCb3ggewogICAgaGVpZ2h0OiA3MHZoOwogICAgb3ZlcmZsb3cteTogc2Nyb2xsOwogIH0KICAucmVtYXBUb29sYm94IHsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIG1pbi1oZWlnaHQ6IDEwMHZoOwogIH0KICAuaGVhZGVyIHsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiBmaXQtY29udGVudDsgLyogRm9vdGVyIGhlaWdodCAqLwogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1ncmF5LXByaW1hcnkpOwogIH0KICAuY29udGVudCB7CiAgICBwYWRkaW5nLWJvdHRvbTogMi41cmVtOyAvKiBGb290ZXIgaGVpZ2h0ICovCiAgICAvKm1heC1oZWlnaHQ6IDYwdmg7Ki8KICB9CiAgLmZvb3RlciB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBib3R0b206IDA7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogZml0LWNvbnRlbnQ7IC8qIEZvb3RlciBoZWlnaHQgKi8KICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmstZ3JheS1wcmltYXJ5KTsKICB9CiAgLm11bHRpc2VsZWN0ewogICAgbWFyZ2luLWJvdHRvbTogMC43NXJlbTsKICAgIG1hcmdpbi10b3A6IDAuMzVyZW07CiAgfQogIC5jbGVhckJ1dHQuYnRuLXNlY29uZGFyeSAgewogICAgY29sb3I6IHdoaXRlOwogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1ncmF5LXByaW1hcnkpOwogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1kYXJrLWdyYXktcHJpbWFyeSk7CiAgICBmb250LXdlaWdodDogdmFyKC0tYm9sZC10ZXh0KTsKICAgIGZvbnQtc2l6ZTogc21hbGw7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgbWluLXdpZHRoOiBmaXQtY29udGVudDsKICB9CiAgLmFzdGVyaXNrX21hcmt7CiAgICBjb2xvcjogI2M1MWUyMzsKICB9Cjwvc3R5bGU+"},null]}
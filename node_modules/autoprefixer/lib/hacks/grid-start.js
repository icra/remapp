<<<<<<< HEAD
(function() {
  var Declaration, GridStart,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Declaration = require('../declaration');

  GridStart = (function(superClass) {
    extend(GridStart, superClass);

    function GridStart() {
      return GridStart.__super__.constructor.apply(this, arguments);
    }

    GridStart.names = ['grid-row-start', 'grid-column-start', 'grid-row', 'grid-column'];

    GridStart.prototype.check = function(decl) {
      return decl.value.indexOf('/') === -1 || decl.value.indexOf('span') !== -1;
    };

    GridStart.prototype.normalize = function(prop) {
      return prop.replace('-start', '');
    };

    GridStart.prototype.prefixed = function(prop, prefix) {
      if (prefix === '-ms-') {
        return prefix + prop.replace('-start', '');
      } else {
        return GridStart.__super__.prefixed.call(this, prop, prefix);
      }
    };

    GridStart.prototype.insert = function(decl, prefix, prefixes) {
      var parts;
      parts = this.splitValue(decl, prefix);
      if (parts.length === 2) {
        decl.cloneBefore({
          prop: '-ms-' + decl.prop + '-span',
          value: parts[1]
        });
      }
      return GridStart.__super__.insert.call(this, decl, prefix, prefixes);
    };

    GridStart.prototype.set = function(decl, prefix) {
      var parts;
      parts = this.splitValue(decl, prefix);
      if (parts.length === 2) {
        decl.value = parts[0];
      }
      return GridStart.__super__.set.call(this, decl, prefix);
    };

    GridStart.prototype.splitValue = function(decl, prefix) {
      var parts;
      if (prefix === '-ms-' && decl.prop.indexOf('-start') === -1) {
        parts = decl.value.split(/\s*\/\s*span\s+/);
        if (parts.length === 2) {
          return parts;
        }
      }
      return false;
    };

    return GridStart;

  })(Declaration);

  module.exports = GridStart;

}).call(this);
=======
"use strict";

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _defaults(subClass, superClass); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Declaration = require('../declaration');

var GridStart = /*#__PURE__*/function (_Declaration) {
  _inheritsLoose(GridStart, _Declaration);

  function GridStart() {
    return _Declaration.apply(this, arguments) || this;
  }

  var _proto = GridStart.prototype;

  /**
   * Do not add prefix for unsupported value in IE
   */
  _proto.check = function check(decl) {
    var value = decl.value;
    return !value.includes('/') || value.includes('span');
  }
  /**
   * Return a final spec property
   */
  ;

  _proto.normalize = function normalize(prop) {
    return prop.replace('-start', '');
  }
  /**
   * Change property name for IE
   */
  ;

  _proto.prefixed = function prefixed(prop, prefix) {
    var result = _Declaration.prototype.prefixed.call(this, prop, prefix);

    if (prefix === '-ms-') {
      result = result.replace('-start', '');
    }

    return result;
  };

  return GridStart;
}(Declaration);

_defineProperty(GridStart, "names", ['grid-row-start', 'grid-column-start']);

module.exports = GridStart;
>>>>>>> joan

'use strict';

<<<<<<< HEAD
exports.__esModule = true;

exports.default = function (number, unit, _ref) {
    var time = _ref.time,
        length = _ref.length,
        angle = _ref.angle;

    var value = dropLeadingZero(number) + (unit ? unit : '');
    var converted = void 0;

    if (length !== false && unit in lengthConv) {
        converted = transform(number, unit, lengthConv);
    }

    if (time !== false && unit in timeConv) {
        converted = transform(number, unit, timeConv);
    }

    if (angle !== false && unit in angleConv) {
=======
Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (number, unit, { time, length, angle }) {
    let value = dropLeadingZero(number) + (unit ? unit : '');
    let converted;

    if (length !== false && unit.toLowerCase() in lengthConv) {
        converted = transform(number, unit, lengthConv);
    }

    if (time !== false && unit.toLowerCase() in timeConv) {
        converted = transform(number, unit, timeConv);
    }

    if (angle !== false && unit.toLowerCase() in angleConv) {
>>>>>>> joan
        converted = transform(number, unit, angleConv);
    }

    if (converted && converted.length < value.length) {
        value = converted;
    }

    return value;
};

<<<<<<< HEAD
var lengthConv = {
=======
const lengthConv = {
>>>>>>> joan
    in: 96,
    px: 1,
    pt: 4 / 3,
    pc: 16
};

<<<<<<< HEAD
var timeConv = {
=======
const timeConv = {
>>>>>>> joan
    s: 1000,
    ms: 1
};

<<<<<<< HEAD
var angleConv = {
=======
const angleConv = {
>>>>>>> joan
    turn: 360,
    deg: 1
};

function dropLeadingZero(number) {
<<<<<<< HEAD
    var value = String(number);
=======
    const value = String(number);
>>>>>>> joan

    if (number % 1) {
        if (value[0] === '0') {
            return value.slice(1);
        }

        if (value[0] === '-' && value[1] === '0') {
            return '-' + value.slice(2);
        }
    }

    return value;
}

function transform(number, unit, conversion) {
<<<<<<< HEAD
    var one = void 0,
        base = void 0;
    var convertionUnits = Object.keys(conversion).filter(function (u) {
        if (conversion[u] === 1) {
            one = u;
        }
        return unit !== u;
    });

    if (unit === one) {
        base = number / conversion[unit];
    } else {
        base = number * conversion[unit];
    }

    return convertionUnits.map(function (u) {
        return dropLeadingZero(base / conversion[u]) + u;
    }).reduce(function (a, b) {
        return a.length < b.length ? a : b;
    });
=======
    const lowerCasedUnit = unit.toLowerCase();
    let one, base;
    let convertionUnits = Object.keys(conversion).filter(u => {
        if (conversion[u] === 1) {
            one = u;
        }
        return lowerCasedUnit !== u;
    });

    if (lowerCasedUnit === one) {
        base = number / conversion[lowerCasedUnit];
    } else {
        base = number * conversion[lowerCasedUnit];
    }

    return convertionUnits.map(u => dropLeadingZero(base / conversion[u]) + u).reduce((a, b) => a.length < b.length ? a : b);
>>>>>>> joan
}

module.exports = exports['default'];